[
  {
    "name": "index.ts",
    "path": "src/index.ts",
    "content": {
      "structured": {
        "description": "A `DocumentStore` class that manages adding, retrieving, and updating files in a specific namespace-based folder structure. It takes in various parameters such as getRemote and additionalMeta and sets up an instance of a DocumentStore class with various parameters such as getRemote and additionalMeta. The code also includes functions for loading summary, loading chunks, getting file, adding file, and updating file.",
        "items": [
          {
            "id": "2f6fca88-3718-4191-f04b-0f145abb9930",
            "ancestors": [],
            "description": "Manages a structured file system for storing and retrieving code documentation. It provides methods for adding, updating, and loading files, as well as generating high-quality documentation outputs.",
            "interfaces": [
              "IDocumentStore"
            ],
            "superclass": null,
            "is_abstract": false,
            "fields": [
              {
                "name": "CHUNK_SIZE",
                "type_name": "number",
                "description": "5, which represents the size of each chunk that stores files in the document store."
              },
              {
                "name": "namespace",
                "type_name": "string",
                "description": "Required to store the name or identifier of the namespace for which the instance of DocumentStore will work."
              },
              {
                "name": "meta",
                "type_name": {
                  "full": "{\n    version: string;\n    created_at: Date;\n    updated_at: Date;\n    [key: string]: any;\n  }",
                  "pattern": "object",
                  "sub": [
                    {
                      "name": "version",
                      "type_name": "string",
                      "value": null,
                      "visibility": null,
                      "is_static": false,
                      "is_optional": false,
                      "is_readonly": false
                    },
                    {
                      "name": "created_at",
                      "type_name": "Date",
                      "value": null,
                      "visibility": null,
                      "is_static": false,
                      "is_optional": false,
                      "is_readonly": false
                    },
                    {
                      "name": "updated_at",
                      "type_name": "Date",
                      "value": null,
                      "visibility": null,
                      "is_static": false,
                      "is_optional": false,
                      "is_readonly": false
                    }
                  ]
                },
                "description": "Used to store information about the metadata of the document."
              },
              {
                "name": "metaTemplate",
                "type_name": {
                  "pattern": "generic",
                  "full": "Record<string, any>",
                  "name": "Record",
                  "by": [
                    "string",
                    "any"
                  ]
                },
                "description": "Used to set the template for meta data."
              },
              {
                "name": "lookup",
                "type_name": "string[][]",
                "description": "Used to store a list of substrings that correspond to chunks of content in the document store."
              },
              {
                "name": "chunks",
                "type_name": "StructuredFile[][]",
                "description": "Used to store chunks of code in a particular order based on their file names."
              },
              {
                "name": "content",
                "type_name": "StructuredFile[]",
                "description": "Used to store the actual code files."
              },
              {
                "name": "status",
                "type_name": {
                  "full": "{\n    summary: boolean;\n    chunks: boolean;\n  }",
                  "pattern": "object",
                  "sub": [
                    {
                      "name": "summary",
                      "type_name": "boolean",
                      "value": null,
                      "visibility": null,
                      "is_static": false,
                      "is_optional": false,
                      "is_readonly": false
                    },
                    {
                      "name": "chunks",
                      "type_name": "boolean",
                      "value": null,
                      "visibility": null,
                      "is_static": false,
                      "is_optional": false,
                      "is_readonly": false
                    }
                  ]
                },
                "description": "Used to store information about the status of the document store, such as whether it has been loaded or not."
              }
            ],
            "name": "DocumentStore",
            "location": {
              "start": 22,
              "insert": 22,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 352,
            "docLength": null
          },
          {
            "id": "e65925a7-07ab-3180-c149-076a19c38dac",
            "ancestors": [
              "2f6fca88-3718-4191-f04b-0f145abb9930"
            ],
            "description": "Sets up various instance variables such as `namespace`, `getRemote`, `meta`, and `lookup`. It also initializes the `chunks` and `content` arrays, and sets the `status` object to false for both `summary` and `chunks`.",
            "params": [
              {
                "name": "namespace",
                "type_name": "string",
                "optional": false,
                "description": "Used to set the namespace for the API calls.",
                "default_value": null
              },
              {
                "name": "getRemote",
                "type_name": "(...args: any[]) => Promise<Record<any, any>>",
                "optional": false,
                "description": "Required for initializing the instance of the class. It is used to fetch data from a remote source, which will be stored in the `content` property of the class instance.",
                "default_value": null
              },
              {
                "name": "additionalMeta",
                "type_name": "Record<string, any>",
                "optional": true,
                "description": "Used to store metadata that is not part of the standard document store version, such as custom properties or values that need to be associated with the chunk or the content.",
                "default_value": "{}"
              }
            ],
            "usage": {
              "language": "typescript",
              "code": "const myDocStore = new DocumentStore(\"my_namespace\", (...args) => {\n  // getRemote method implementation here\n}, {\n  additionalMetaDataHere: \"example\"\n});\n\nmyDocStore.setUpdatedAt(new Date());\nawait myDocStore.loadSummary();\n",
              "description": "\nThe above example demonstrates how the DocumentStore constructor can be used to create an instance of a DocumentStore class with custom parameters such as getRemote and metadata. It also shows how the setUpdatedAt method can be used to update the meta data, and how the loadSummary method can be used to retrieve document summaries from a provider and update local meta data based on the remote summary."
            },
            "name": null,
            "location": {
              "start": 53,
              "insert": 41,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 40,
                "end": 52
              }
            },
            "item_type": "constructor",
            "length": 26,
            "docLength": 12
          },
          {
            "id": "7bee1690-6a61-8894-104f-a5d1d0021613",
            "ancestors": [
              "2f6fca88-3718-4191-f04b-0f145abb9930"
            ],
            "description": "Updates the `updated_at` metadata field of the object, which stores information about when the document was last updated.",
            "params": [
              {
                "name": "updated_at",
                "default_value": null,
                "optional": false,
                "type_name": "Date",
                "description": "Used to update the `updated_at` metadata field of the entity."
              }
            ],
            "returns": {
              "type_name": "Date",
              "description": "The updated `updated_at` field for the current object."
            },
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore(getRemote, integration);\ndocumentStore.setUpdatedAt(new Date());\n",
              "description": ""
            },
            "name": "setUpdatedAt",
            "location": {
              "start": 87,
              "insert": 80,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 79,
                "end": 86
              }
            },
            "item_type": "function",
            "length": 3,
            "docLength": 7
          },
          {
            "id": "6bb503c7-9268-66ae-6542-7d8987218a54",
            "ancestors": [
              "2f6fca88-3718-4191-f04b-0f145abb9930"
            ],
            "description": "Retrieves and updates summary information from the document store, merging it with the local metadata template, and storing it back in the document store.",
            "params": [],
            "returns": {
              "type_name": "Summary",
              "description": "An object containing meta data and two arrays: lookup and chunks."
            },
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore();\ndocumentStore.CHUNK_SIZE = 100;\ndocumentStore.namespace = 'example';\ndocumentStore.getRemote = (...args) => {\n    // implementation of remote call goes here\n};\ndocumentStore.metaTemplate = {};\ndocumentStore.lookup = [];\ndocumentStore.chunks = [];\ndocumentStore.content = [];\ndocumentStore.status = {};\n\n// Load the summary from the server\nawait documentStore.loadSummary();\n\n// Use the loaded summary to retrieve data from the store\nconst chunkData = documentStore.getChunk(10);\n",
              "description": ""
            },
            "name": "loadSummary",
            "location": {
              "start": 95,
              "insert": 91,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 90,
                "end": 94
              }
            },
            "item_type": "function",
            "length": 32,
            "docLength": 4
          },
          {
            "id": "e6929d79-1d35-0681-4147-24e6f8e228b7",
            "ancestors": [
              "2f6fca88-3718-4191-f04b-0f145abb9930",
              "6bb503c7-9268-66ae-6542-7d8987218a54"
            ],
            "description": "Sets the value of `this.meta` object properties using the `summary.meta` property as a fallback if it's undefined, or the original value if it's not defined in `summary.meta`.",
            "name": null,
            "location": {
              "start": 121,
              "insert": 122,
              "offset": " ",
              "indent": 6,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 3,
            "docLength": null
          },
          {
            "id": "92e66cd4-c9e3-12a0-0749-f331456fb69a",
            "ancestors": [
              "2f6fca88-3718-4191-f04b-0f145abb9930"
            ],
            "description": "Asyncly loads chunks of data from the server based on their indices, and sets the `chunks` property to `true` once loading is complete.",
            "params": [],
            "returns": {
              "type_name": "boolean",
              "description": "Whether the chunks have been loaded successfully or not."
            },
            "usage": {
              "language": "typescript",
              "code": "const docStore = new DocumentStore(getRemote, integration);\ndocStore.load(); //load summary and chunks of code\n",
              "description": ""
            },
            "name": "load",
            "location": {
              "start": 131,
              "insert": 128,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 127,
                "end": 130
              }
            },
            "item_type": "function",
            "length": 12,
            "docLength": 3
          },
          {
            "id": "168a9f8b-cbad-63a9-6549-6d33250d2d38",
            "ancestors": [
              "2f6fca88-3718-4191-f04b-0f145abb9930"
            ],
            "description": "Updates the metadata of a document by combining the existing metadata with any additional metadata provided as an argument, creating a new metadata object that includes all the updated values.",
            "params": [
              {
                "name": "additionalMeta",
                "default_value": null,
                "optional": false,
                "type_name": "Record<string, any>",
                "description": "Used to provide additional metadata to be merged with the existing metadata of the component."
              }
            ],
            "returns": {
              "type_name": "Object",
              "description": "An updated version of the `meta` object by combining it with the provided `additionalMeta` object."
            },
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore(getRemote);\ndocumentStore.updateMetadata({version:'1.0', created_at: new Date(), updated_at: new Date()});\n",
              "description": ""
            },
            "name": "updateMetadata",
            "location": {
              "start": 151,
              "insert": 151,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "function",
            "length": 6,
            "docLength": null
          },
          {
            "id": "7e334bd2-3cc3-cd87-9a46-17ae84d245d1",
            "ancestors": [
              "2f6fca88-3718-4191-f04b-0f145abb9930"
            ],
            "description": "Async loads a specific chunk from a remote source and adds it to the document store's content and chunks array if successful.",
            "params": [
              {
                "name": "chunkIndex",
                "default_value": null,
                "optional": false,
                "type_name": "number",
                "description": "Used to indicate which chunk to load from the server."
              }
            ],
            "returns": {
              "type_name": "boolean",
              "description": "True if the chunk was successfully loaded and false otherwise."
            },
            "usage": {
              "language": "typescript",
              "code": "const docStore = new DocumentStore(getRemote, integration);\nawait docStore.loadChunk(0)\nif (docStore.status.chunks) {\n    // Access chunk data\n}\n",
              "description": ""
            },
            "name": "loadChunk",
            "location": {
              "start": 175,
              "insert": 164,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 163,
                "end": 174
              }
            },
            "item_type": "function",
            "length": 16,
            "docLength": 11
          },
          {
            "id": "c5fde800-c266-48a4-fc45-82212945def5",
            "ancestors": [
              "2f6fca88-3718-4191-f04b-0f145abb9930"
            ],
            "description": "Retrieves a file from a summary file and loads it into memory if necessary. It calculates the chunk and file index within that chunk, and checks if the file is already loaded in the correct chunk before returning it.",
            "params": [
              {
                "name": "path",
                "default_value": null,
                "optional": false,
                "type_name": "string",
                "description": "Used to specify the file path being looked up."
              }
            ],
            "returns": {
              "type_name": "StructuredFile|null",
              "description": "A file object or null if it's not found."
            },
            "usage": {
              "language": "typescript",
              "code": "const getFile = async (path: string): Promise<StructuredFile | null> => {\n    const documentStore = new DocumentStore(getRemote);\n    return await documentStore.getFile(path);\n};\n",
              "description": ""
            },
            "name": "getFile",
            "location": {
              "start": 201,
              "insert": 191,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 190,
                "end": 200
              }
            },
            "item_type": "function",
            "length": 23,
            "docLength": 10
          },
          {
            "id": "957457af-f25e-7784-2c4d-c6b7ce552b40",
            "ancestors": [
              "2f6fca88-3718-4191-f04b-0f145abb9930"
            ],
            "description": "Adds a new document to the end of the lookup table if it is full or appends it to the last existing entry in the table otherwise.",
            "params": [
              {
                "name": "path",
                "default_value": null,
                "optional": false,
                "type_name": "string",
                "description": "Passed to the function as an argument. Its purpose is to represent the path or location where the new element should be added to the lookup subtable."
              }
            ],
            "returns": {
              "type_name": "string[]",
              "description": "An array of strings."
            },
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore(getRemote, integration);\ndocumentStore.addToEndOfLookup('somePath');\n",
              "description": ""
            },
            "name": "addToEndOfLookup",
            "location": {
              "start": 247,
              "insert": 241,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 240,
                "end": 246
              }
            },
            "item_type": "function",
            "length": 11,
            "docLength": 6
          },
          {
            "id": "66a11c94-0503-7798-354b-e1b693e89388",
            "ancestors": [
              "2f6fca88-3718-4191-f04b-0f145abb9930"
            ],
            "description": "Adds files to the end of chunks if the last subtable is full or if the current chunk is at its maximum size.",
            "params": [
              {
                "name": "file",
                "default_value": null,
                "optional": false,
                "type_name": "StructuredFile",
                "description": "Used to add a file to the end of an array of chunks."
              }
            ],
            "returns": {
              "type_name": "number[]",
              "description": "The updated length of the chunks array after adding a new file to the end of it."
            },
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore(getRemote, integration);\ndocumentStore.addToEndOfChunks(file);\n",
              "description": ""
            },
            "name": "addToEndOfChunks",
            "location": {
              "start": 268,
              "insert": 258,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 257,
                "end": 267
              }
            },
            "item_type": "function",
            "length": 11,
            "docLength": 10
          },
          {
            "id": "d8973255-23ad-ed86-e04a-cc9c1c015dea",
            "ancestors": [
              "2f6fca88-3718-4191-f04b-0f145abb9930"
            ],
            "description": "Adds a file to the document store if certain conditions are met, including that the `status.chunks` property is set and the provided file path exists. It updates the file in the store if it already exists, or adds it to the end of the lookup and chunks arrays if it does not exist.",
            "params": [
              {
                "name": "file",
                "default_value": null,
                "optional": false,
                "type_name": "StructuredFile",
                "description": "Used to represent a file to be added to the content library."
              }
            ],
            "returns": {
              "type_name": "boolean",
              "description": "True when the file is successfully added to the content, and false otherwise."
            },
            "usage": {
              "language": "typescript",
              "code": "let docStore = new DocumentStore();\ndocStore.getRemote = async (file) => {\n  let data = await fetch(file);\n  return JSON.parse(data);\n}\ndocStore.addFile(\"https://example.com/document.txt\");\ndocStore.updateFile({\n  path: \"https://example.com/document2.txt\",\n  content: \"This is some new content\",\n});\n",
              "description": ""
            },
            "name": "addFile",
            "location": {
              "start": 289,
              "insert": 279,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 278,
                "end": 288
              }
            },
            "item_type": "function",
            "length": 20,
            "docLength": 10
          },
          {
            "id": "15a9ce07-1cd4-d2aa-0844-d4de6d5161aa",
            "ancestors": [
              "2f6fca88-3718-4191-f04b-0f145abb9930"
            ],
            "description": "Updates a file in the store by checking its existence, loading it if necessary, and storing it in the appropriate chunk and index position.",
            "params": [
              {
                "name": "file",
                "default_value": null,
                "optional": false,
                "type_name": "StructuredFile",
                "description": "Used to represent a file to be updated or added to the cache. Its purpose is to provide the file information for updating or adding it to the cache."
              }
            ],
            "returns": {
              "type_name": "boolean",
              "description": "Whether the file was updated successfully or not."
            },
            "usage": {
              "language": "typescript",
              "code": "const store = new DocumentStore({\n  getRemote: async () => {\n    return {\n      \"chunks\": [{ \"name\": \"chunk1\", \"path\": \"/path/to/file1.txt\" }, { \"name\": \"chunk2\", \"path\": \"/path/to/file2.txt\" }],\n      \"content\": [\n        { \"path\": \"/path/to/file1.txt\", \"data\": \"this is the first file's data\" },\n        { \"path\": \"/path/to/file2.txt\", \"data\": \"this is the second file's data\" }\n      ]\n    };\n  },\n  meta: {\n    version: \"1.0.0\",\n    created_at: new Date(),\n    updated_at: new Date()\n  }\n});\n\nconst result = await store.updateFile({ name: \"file3.txt\", path: \"/path/to/file3.txt\" });\n",
              "description": ""
            },
            "name": "updateFile",
            "location": {
              "start": 319,
              "insert": 309,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 308,
                "end": 318
              }
            },
            "item_type": "function",
            "length": 27,
            "docLength": 10
          },
          {
            "id": "24da14cf-fcf8-76a6-ba41-d8723be0ce46",
            "ancestors": [
              "2f6fca88-3718-4191-f04b-0f145abb9930"
            ],
            "description": "Generates an object summarizing the meta and lookup data of the document store.",
            "params": [],
            "returns": {
              "type_name": "Summary",
              "description": "A combination of two properties: `meta` and `lookup`."
            },
            "usage": {
              "language": "typescript",
              "code": "const myDocumentStore = new DocumentStore(getRemote, integration);\nmyDocumentStore.outputSummary(); // { meta: ..., lookup: ... }\n",
              "description": ""
            },
            "name": "outputSummary",
            "location": {
              "start": 352,
              "insert": 346,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 345,
                "end": 351
              }
            },
            "item_type": "function",
            "length": 6,
            "docLength": 6
          },
          {
            "id": "3439e126-4c64-dfa8-9541-263b48c34e2f",
            "ancestors": [
              "2f6fca88-3718-4191-f04b-0f145abb9930"
            ],
            "description": "Generates and returns a Record object containing chunks of the document, where each chunk is represented by a key-value pair consisting of the chunk path and the chunk content.",
            "params": [],
            "returns": {
              "type_name": "Record<string,any>",
              "description": "A collection of key-value pairs where each key is a unique chunk identifier and each value is the contents of that chunk."
            },
            "usage": {
              "language": "typescript",
              "code": "const store = new DocumentStore(getRemote, integration);\nstore.outputChunks()\n",
              "description": ""
            },
            "name": "outputChunks",
            "location": {
              "start": 364,
              "insert": 358,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 357,
                "end": 363
              }
            },
            "item_type": "function",
            "length": 9,
            "docLength": 6
          }
        ]
      }
    }
  },
  {
    "name": "index.test.ts",
    "path": "tests/index.test.ts",
    "content": {
      "structured": {
        "description": "A `DocumentStore` class that manages a collection of files and their metadata. The class provides methods for loading, adding, updating, and retrieving files from the store. It also includes tests for various use cases, such as creating an empty store, setting the summary file path, loading a summary file, and adding or updating files in the store. The code uses the `StructuredFile` type and the `mockSummary` function to generate mock summaries of files.",
        "items": [
          {
            "id": "54784b16-dc93-1eaa-c648-e6a9113abc03",
            "ancestors": [],
            "description": "Resolves a promise containing metadata and lookup information for a mock API endpoint. The metadata includes creation and update timestamps, while the lookup array contains paths to two files in the `src/` directory: `index.js`, `database.js`, and `component/index.js`.",
            "params": [],
            "returns": {
              "type_name": "Object",
              "description": "A meta object containing creation and update timestamps and a list of pipelines, as well as a lookup array with paths to two files and one directory in the src directory."
            },
            "usage": {
              "language": "typescript",
              "code": "const mockSummary = () => {\n    return Promise.resolve({\n      meta: {\n        created_at: \"2024-04-08T13:50:02.790Z\",\n        updated_at: \"2024-04-08T13:50:02.790Z\",\n        pipelines: [\"cd1d3bab-03db-494c-9e03-16ee456964fb\"],\n      },\n      lookup: [[\"src/index.js\", \"src/database.js\"], [\"src/component/index.js\"]],\n    });\n  };\n",
              "description": ""
            },
            "name": "mockSummary",
            "location": {
              "start": 6,
              "insert": 6,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 9,
            "docLength": null
          },
          {
            "id": "d2c09581-f2ac-5d81-1943-78c80aecfaf5",
            "ancestors": [],
            "description": "Takes a chunk path as input and returns a resolved promise of either the mock summary or a file from the chunks array depending on the chunk path provided.",
            "params": [
              {
                "name": "chunkPath",
                "default_value": null,
                "optional": false,
                "type_name": "string",
                "description": "Used to determine which mock file to return based on its path relative to the namespace prefix."
              }
            ],
            "returns": {
              "type_name": "Promise",
              "description": "Resolved with either a mock summary or one of the chunks."
            },
            "usage": {
              "language": "typescript",
              "code": "const chunkPath = `.${NAMESPACE}/00001.json`;\ngetFileMock(chunkPath).then((data) => {\n  // data will contain the contents of the file located at chunkPath\n});\n",
              "description": ""
            },
            "name": "getFileMock",
            "location": {
              "start": 16,
              "insert": 16,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 12,
            "docLength": null
          },
          {
            "id": "42ef8453-2d77-95a8-554a-205aaf438ac1",
            "ancestors": [],
            "description": "Returns an array of objects, each representing a file or directory within a project. The objects contain information about the file's name, path, and content, including a description.",
            "params": [],
            "returns": {
              "type_name": "Object",
              "description": "An array of objects representing files and their contents. Each object in the array has three properties: name, path, and content, where content is a JSON object containing a string value representing the file's contents."
            },
            "usage": {
              "language": "typescript",
              "code": "const chunks = () => ({\n  \"00000\": [\n    {\n      name: \"mock-1\",\n      path: \"src/index.js\",\n      content: {\n        description: \"duck\",\n      },\n    },\n    {\n      name: \"mock-2\",\n      path: \"src/database.js\",\n      content: {\n        description: \"duckDB\",\n      },\n    },\n  ],\n  \"00001\": [\n    {\n      name: \"mock-3\",\n      path: \"src/component/index.js\",\n      content: {\n        description: \"Component Duck\",\n      },\n    },\n  ],\n});\n",
              "description": ""
            },
            "name": "chunks",
            "location": {
              "start": 29,
              "insert": 29,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 27,
            "docLength": null
          },
          {
            "id": "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae",
            "ancestors": [],
            "description": "Tests various features of a DocumentStore.",
            "name": null,
            "location": {
              "start": 72,
              "insert": 73,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 127,
            "docLength": null
          },
          {
            "id": "e39cefa6-6f3c-11b0-a543-efb3ad18b4be",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "Creates an instance of `DocumentStore` and calls its `outputSummary()` method, which returns a summary of the document store's contents.",
            "name": null,
            "location": {
              "start": 73,
              "insert": 74,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 7,
            "docLength": null
          },
          {
            "id": "5d73bcf9-32c3-e396-aa42-d33f685393c0",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "Creates a new instance of `DocumentStore`, passing the namespace as an argument, and resolves a promise to obtain the chunk summary path based on the namespace.",
            "name": null,
            "location": {
              "start": 80,
              "insert": 81,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 7,
            "docLength": null
          },
          {
            "id": "5189ae6a-225a-cc8e-c848-8ee549f24403",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "Loads a summary file and returns a summary object containing two items in its `lookup` property.",
            "name": null,
            "location": {
              "start": 87,
              "insert": 88,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 9,
            "docLength": null
          },
          {
            "id": "eb9de803-c44e-7086-3645-bb43e4ad1879",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "1) creates a new instance of `DocumentStore`, 2) sets its chunk size to 2, and 3) loads all chunks using the `load()` method, after which it verifies that both the summary and output chunks contain two elements each.",
            "name": null,
            "location": {
              "start": 96,
              "insert": 97,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 17,
            "docLength": null
          },
          {
            "id": "34a3eb46-440e-0b81-494c-98661494aa51",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "1) creates a new instance of `DocumentStore`, 2) sets the chunk size to 2, and 3) retrieves the file at the specified path (\"src/database.js\") using the `getFile()` method.",
            "name": null,
            "location": {
              "start": 113,
              "insert": 114,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 12,
            "docLength": null
          },
          {
            "id": "dbc7e254-f2d7-9fb6-074a-20cd2a79b475",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "* Creates a new instance of `DocumentStore` with a mock `getFile` method.\n* Calls the `getFile` method on the `DocumentStore` instance with the file path \"src/index.js\".\n* Expects an error to be thrown due to the absence of the `load` method call before accessing the file.",
            "name": null,
            "location": {
              "start": 125,
              "insert": 126,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 9,
            "docLength": null
          },
          {
            "id": "a7776b74-8dea-0d9e-d04a-c5b55b6c07d9",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "Adds a new file to a store and retrieves it back for verification.",
            "name": null,
            "location": {
              "start": 134,
              "insert": 135,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 14,
            "docLength": null
          },
          {
            "id": "7a4f7b46-c275-bc9c-0443-1eba61261138",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "1) creates a new `DocumentStore` instance, 2) sets its `CHUNK_SIZE` to a specific value, and 3) updates an existing file using the `updateFile()` method, followed by retrieving the file using the `getFile()` method and verifying its path.",
            "name": null,
            "location": {
              "start": 148,
              "insert": 149,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 14,
            "docLength": null
          },
          {
            "id": "b7d35d2d-cc97-1da7-314c-29d5ed647f1f",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "1) creates a new instance of `DocumentStore`, 2) sets properties on that instance, and 3) updates an existing file in the store by providing the same path but different content description.",
            "name": null,
            "location": {
              "start": 162,
              "insert": 163,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 18,
            "docLength": null
          },
          {
            "id": "6b9dcf34-3a0d-5681-4948-1f6642e76ff8",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "Updates an existing file in a document store by adding new content and verifying if the updated file's description matches the expected value.",
            "name": null,
            "location": {
              "start": 180,
              "insert": 181,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 18,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "IDocumentStore.d.ts",
    "path": "types/IDocumentStore.d.ts",
    "content": {
      "structured": {
        "description": "An interface for a document store that includes several properties and methods: `CHUNK_SIZE`, `namespace`, `meta`, `lookup`, and `status`. The `CHUNK_SIZE` property sets the size of chunks used for storing documents, while the `namespace` property specifies the namespace for the document store. The `meta` property provides metadata for the document store, and the `lookup` property is an array of strings representing the paths to chunks containing documents. The `status` property contains two properties: `summary`, which indicates whether the document store has a summary available, and `chunks`, which indicates whether the document store has any chunks available.",
        "items": [
          {
            "id": "780ab884-af40-379b-1348-8337e3c66a94",
            "ancestors": [],
            "description": "Defines a set of properties and methods for storing and managing documents. It includes the document chunk size, namespace, metadata, and a lookup array. Additionally, it provides a status object with summary and chunks properties.",
            "name": "IDocumentStore",
            "location": {
              "start": 3,
              "insert": 3,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 10,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Meta.d.ts",
    "path": "types/Meta.d.ts",
    "content": {
      "structured": {
        "description": "An interface called `Meta` that represents a metadata object. The interface has four properties: `version`, `created_at`, `updated_at`, and an optional property with any type of value. The `version` property is a string representing the version number, the `created_at` and `updated_at` properties are Date objects representing the creation and last update time of the metadata object.",
        "items": [
          {
            "id": "ab4e3495-19b9-a8a0-7c4f-a600389893b7",
            "ancestors": [],
            "description": "Defines a set of properties that consist of a version, creation and update dates, and arbitrary data stored under key strings.",
            "name": "Meta",
            "location": {
              "start": 1,
              "insert": 1,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 6,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "StructuredFile.d.ts",
    "path": "types/StructuredFile.d.ts",
    "content": {
      "structured": {
        "description": "An interface named StructuredFile that consists of three properties: name, path, and content. The interface represents a file with structured data, allowing for easy manipulation and storage. The content property can hold any type of data, and the other two properties provide information about the file's identity and location.",
        "items": [
          {
            "id": "2801a404-7bff-0c82-9643-0b8059ca5fcc",
            "ancestors": [],
            "description": "Defines a set of properties for a file, including its name, path, and contents.",
            "name": "StructuredFile",
            "location": {
              "start": 1,
              "insert": 1,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 5,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Summary.d.ts",
    "path": "types/Summary.d.ts",
    "content": {
      "structured": {
        "description": "An interface Summary, which consists of three properties: meta, lookup, and chunks. The meta property is of type Meta, while the lookup property is an array of strings, representing a two-dimensional matrix. The chunks property is optional and represents a list of strings, likely used for chunking the input data.",
        "items": [
          {
            "id": "026a21ea-5807-858f-2b43-e6bd784ef8dc",
            "ancestors": [],
            "description": "Defines a set of properties: `meta`, `lookup`, and `chunks`. The `meta` property is an object with additional information about the summary, while the `lookup` property is an array of arrays representing the lookup tables for each chunk. The `chunks` property can optionally be defined as an array of strings, representing the chunks of data in the summary.",
            "name": "Summary",
            "location": {
              "start": 3,
              "insert": 3,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 5,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "jest.config.js",
    "path": "jest.config.js",
    "content": {
      "structured": {
        "description": "configuration options for Jest, a popular JavaScript testing framework. The `preset` option sets the Jest preset to use, in this case \"ts-jest\". The `testEnvironment` option specifies that Jest should run tests in a Node environment. Finally, the `testMatch` option specifies which files should be searched for test files, using glob syntax to match files with extensions \".test.ts\".",
        "items": []
      }
    }
  }
]