[
  {
    "name": "index.ts",
    "path": "src/index.ts",
    "content": {
      "structured": {
        "description": "A class called DocumentStore that manages a structured file system for storing and retrieving files based on their paths. It provides several methods for adding, updating, and looking up files in the system, including loading and unloading chunks of files, adding files to the end of a chunk or creating a new chunk if necessary, and outputting summaries or chunks of the file system. The class uses TypeScript packages such as `string_decoder` and `util`.",
        "items": [
          {
            "id": "ca42b4a8-1551-e782-9c4f-ee063f96de04",
            "ancestors": [],
            "description": "Is responsible for managing and organizing code chunks based on their contents, creating a structured file that can be used for efficient content retrieval and manipulation.",
            "interfaces": [
              "IDocumentStore"
            ],
            "superclass": null,
            "is_abstract": false,
            "fields": [
              {
                "name": "CHUNK_SIZE",
                "type_name": "number",
                "description": "16777215 (0x664000). It represents the size of each chunk of code stored in the lookup table."
              },
              {
                "name": "namespace",
                "type_name": "string",
                "description": "Used to define the namespace of the document store, which is required when creating a new instance of the `DocumentStore` class."
              },
              {
                "name": "meta",
                "type_name": {
                  "full": "{\n    version: string;\n    created_at: Date;\n    updated_at: Date;\n    [key: string]: any;\n  }",
                  "pattern": "object",
                  "sub": [
                    {
                      "name": "version",
                      "type_name": "string",
                      "value": null,
                      "visibility": null,
                      "is_static": false,
                      "is_optional": false,
                      "is_readonly": false
                    },
                    {
                      "name": "created_at",
                      "type_name": "Date",
                      "value": null,
                      "visibility": null,
                      "is_static": false,
                      "is_optional": false,
                      "is_readonly": false
                    },
                    {
                      "name": "updated_at",
                      "type_name": "Date",
                      "value": null,
                      "visibility": null,
                      "is_static": false,
                      "is_optional": false,
                      "is_readonly": false
                    }
                  ]
                },
                "description": "Used to store metadata about the content of the document, such as its version number, creation and update dates, and other information that can be used to manage the document and its content.}."
              },
              {
                "name": "metaTemplate",
                "type_name": {
                  "pattern": "generic",
                  "full": "Record<string, any>",
                  "name": "Record",
                  "by": [
                    "string",
                    "any"
                  ]
                },
                "description": "Used to define the template for meta data."
              },
              {
                "name": "lookup",
                "type_name": "string[][]",
                "description": "Used to store a two-dimensional array where each subarray represents a chunk, and each element within that subarray represents a file path stored at a specific index in that chunk."
              },
              {
                "name": "chunks",
                "type_name": "StructuredFile[][]",
                "description": "Used to store chunks of code in a structured way, with each chunk containing a group of files of similar size."
              },
              {
                "name": "content",
                "type_name": "StructuredFile[]",
                "description": "Used to store all added files, including their paths and chunks index."
              },
              {
                "name": "status",
                "type_name": {
                  "full": "{\n    summary: boolean;\n    chunks: boolean;\n  }",
                  "pattern": "object",
                  "sub": [
                    {
                      "name": "summary",
                      "type_name": "boolean",
                      "value": null,
                      "visibility": null,
                      "is_static": false,
                      "is_optional": false,
                      "is_readonly": false
                    },
                    {
                      "name": "chunks",
                      "type_name": "boolean",
                      "value": null,
                      "visibility": null,
                      "is_static": false,
                      "is_optional": false,
                      "is_readonly": false
                    }
                  ]
                },
                "description": "Used to track whether the store has finished loading files (summary: true) or not(summary: false)."
              }
            ],
            "name": "DocumentStore",
            "location": {
              "start": 22,
              "insert": 22,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 352,
            "docLength": null
          },
          {
            "id": "5c005061-4a98-6b88-f14a-75554498ac9c",
            "ancestors": [
              "ca42b4a8-1551-e782-9c4f-ee063f96de04"
            ],
            "description": "Sets up class variables and properties, including `CHUNK_SIZE`, `namespace`, `getRemote`, `meta`, `lookup`, `chunks`, and `content`. It also checks for required inputs and sets default values for some properties.",
            "params": [
              {
                "name": "namespace",
                "type_name": "string*",
                "optional": false,
                "description": "Used to set the name space for the chunker, which allows the chunker to identify which chunks belong to the same namespace.",
                "default_value": null
              },
              {
                "name": "getRemote",
                "type_name": "(...args: any[]) => Promise<Record<any, any>>*",
                "optional": false,
                "description": "Required to return a promise containing a record with data.",
                "default_value": null
              },
              {
                "name": "additionalMeta",
                "type_name": "Record<string, any>*",
                "optional": true,
                "description": "Used to store custom metadata for the document.",
                "default_value": "{}"
              }
            ],
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore(\"my-namespace\", getRemoteMethod, { additionalMeta });\ndocumentStore.loadSummary();\n",
              "description": ""
            },
            "name": null,
            "location": {
              "start": 53,
              "insert": 41,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 40,
                "end": 52
              }
            },
            "item_type": "constructor",
            "length": 26,
            "docLength": 12
          },
          {
            "id": "908a15dd-7075-0e93-bf4e-12f0c3409d48",
            "ancestors": [
              "ca42b4a8-1551-e782-9c4f-ee063f96de04"
            ],
            "description": "Updates the `updatedAt` metadata property with the provided `Date` object.",
            "params": [
              {
                "name": "updated_at",
                "default_value": null,
                "optional": false,
                "type_name": "Date*",
                "description": "Used to update the \"updated at\" metadata of the object being updated."
              }
            ],
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore(getRemote, integration);\ndocumentStore.setUpdatedAt(new Date());\n",
              "description": ""
            },
            "name": "setUpdatedAt",
            "location": {
              "start": 87,
              "insert": 80,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 79,
                "end": 86
              }
            },
            "item_type": "function",
            "length": 3,
            "docLength": 7
          },
          {
            "id": "7591bb3e-df47-afa5-f641-1831c1f92326",
            "ancestors": [
              "ca42b4a8-1551-e782-9c4f-ee063f96de04"
            ],
            "description": "Updates and stores summary information in the local store based on remote information, and sets metadata properties for the local store.",
            "params": [],
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore(getRemote);\ndocumentStore.loadSummary();\n",
              "description": "\nHere, the loadSummary function is called to download the summary of documents from a remote source."
            },
            "name": "loadSummary",
            "location": {
              "start": 95,
              "insert": 91,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 90,
                "end": 94
              }
            },
            "item_type": "function",
            "length": 32,
            "docLength": 4
          },
          {
            "id": "98331336-679b-8e8a-4c45-afe45ef2f5c4",
            "ancestors": [
              "ca42b4a8-1551-e782-9c4f-ee063f96de04",
              "7591bb3e-df47-afa5-f641-1831c1f92326"
            ],
            "description": "Updates the `this.meta` object with values from the `summary.meta` object or the provided `value`, if the `summary` object is not defined or does not have a property for the specified key.",
            "name": null,
            "location": {
              "start": 121,
              "insert": 122,
              "offset": " ",
              "indent": 6,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 3,
            "docLength": null
          },
          {
            "id": "7cbb6863-86a1-72bb-0044-fb20b693df1f",
            "ancestors": [
              "ca42b4a8-1551-e782-9c4f-ee063f96de04"
            ],
            "description": "Async loads the document chunks by iterating through the chunk indices and loading each chunk synchronously using the `loadChunk` method. It also sets the `chunks` property to `true` once all chunks have been loaded.",
            "params": [],
            "usage": {
              "language": "typescript",
              "code": "const store = new DocumentStore(getRemote);\nstore.load();\n",
              "description": ""
            },
            "name": "load",
            "location": {
              "start": 131,
              "insert": 128,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 127,
                "end": 130
              }
            },
            "item_type": "function",
            "length": 12,
            "docLength": 3
          },
          {
            "id": "12db6d76-5d1e-64a5-274e-fa20e96e3b84",
            "ancestors": [
              "ca42b4a8-1551-e782-9c4f-ee063f96de04"
            ],
            "description": "Updates the metadata of a document by combining the existing metadata and additional metadata passed as an argument, creating a new metadata object that includes both.",
            "params": [
              {
                "name": "additionalMeta",
                "default_value": null,
                "optional": false,
                "type_name": "Record<string, any>*",
                "description": "Used to update the metadata by adding new key-value pairs to the existing ones."
              }
            ],
            "usage": {
              "language": "typescript",
              "code": "// Instantiate the DocumentStore class with the getRemote parameter and the integration object.\nconst documentStore = new DocumentStore(getRemote, integration);\n\n// Update metadata by passing a record of additional meta information to the updateMetadata method.\ndocumentStore.updateMetadata({ version: \"1.0.0\" });\n",
              "description": ""
            },
            "name": "updateMetadata",
            "location": {
              "start": 151,
              "insert": 151,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "function",
            "length": 6,
            "docLength": null
          },
          {
            "id": "946898a7-7531-db97-8b45-0e9f2e6d3ab8",
            "ancestors": [
              "ca42b4a8-1551-e782-9c4f-ee063f96de04"
            ],
            "description": "Async loads a chunk of the document from the server, given its index, and appends it to the content and chunks collections if successful.",
            "params": [
              {
                "name": "chunkIndex",
                "default_value": null,
                "optional": false,
                "type_name": "number*",
                "description": "Used to identify the chunk being loaded. It serves as an index to access the appropriate chunk data from the `chunks` array."
              }
            ],
            "returns": {
              "type_name": "Promise<boolean>*",
              "description": "Resolved to true if the chunk was loaded successfully, or false otherwise."
            },
            "usage": {
              "language": "typescript",
              "code": "const docStore = new DocumentStore(getRemote, integration);\ndocStore.loadChunk(0);\n",
              "description": ""
            },
            "name": "loadChunk",
            "location": {
              "start": 175,
              "insert": 164,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 163,
                "end": 174
              }
            },
            "item_type": "function",
            "length": 16,
            "docLength": 11
          },
          {
            "id": "08b11a36-878f-7d97-cd46-ba854d1814eb",
            "ancestors": [
              "ca42b4a8-1551-e782-9c4f-ee063f96de04"
            ],
            "description": "Retrieves a file from the store based on its path. It first checks if the summary has been loaded, then calculates the chunk it is in and loads it if necessary. Finally, it returns the file index within that chunk.",
            "params": [
              {
                "name": "path",
                "default_value": null,
                "optional": false,
                "type_name": "string*",
                "description": "Used to identify the file being retrieved, which must match the path of a file in the current summary."
              }
            ],
            "returns": {
              "type_name": "Promise<StructuredFile | null>*",
              "description": "Either a StructuredFile object or null if the file cannot be found or has already been loaded."
            },
            "usage": {
              "language": "typescript",
              "code": "const docStore = new DocumentStore(getRemote);\n// Load summary\ndocStore.loadSummary();\n// Get a file from the store\nconst file = await docStore.getFile(\"path/to/file\");\n",
              "description": ""
            },
            "name": "getFile",
            "location": {
              "start": 201,
              "insert": 191,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 190,
                "end": 200
              }
            },
            "item_type": "function",
            "length": 23,
            "docLength": 10
          },
          {
            "id": "fcc560b4-31c1-8da9-6245-541014c03b97",
            "ancestors": [
              "ca42b4a8-1551-e782-9c4f-ee063f96de04"
            ],
            "description": "Adds a new path to the end of the lookup subtable if it's not already full, or appends it to the last entry in the table otherwise.",
            "params": [
              {
                "name": "path",
                "default_value": null,
                "optional": false,
                "type_name": "string*",
                "description": "Used to add a new entry to the lookup subtable, either by creating a new table if it does not exist or by adding a new entry to an existing one."
              }
            ],
            "usage": {
              "language": "typescript",
              "code": "const docStore = new DocumentStore();\n\ndocStore.getRemote = async () => {\n    // this function returns a promise of a document object\n    return { content: \"This is some sample text\" };\n};\n\n// Call addToEndOfLookup method with the path argument \ndocStore.addToEndOfLookup(\"some/path\");\n",
              "description": ""
            },
            "name": "addToEndOfLookup",
            "location": {
              "start": 247,
              "insert": 241,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 240,
                "end": 246
              }
            },
            "item_type": "function",
            "length": 11,
            "docLength": 6
          },
          {
            "id": "da2cfc75-9144-bcbd-2145-a9e23a9cb8b9",
            "ancestors": [
              "ca42b4a8-1551-e782-9c4f-ee063f96de04"
            ],
            "description": "Adds new files to the end of existing chunks or creates a new chunk if the last one is full, maintaining a fixed chunk size.",
            "params": [
              {
                "name": "file",
                "default_value": null,
                "optional": false,
                "type_name": "StructuredFile*",
                "description": "Used to add a file to the end of a list of chunks."
              }
            ],
            "usage": {
              "language": "typescript",
              "code": "const store = new DocumentStore({ getRemote, integration });\nstore.addToEndOfChunks(file); // Adds a file to the last chunk if it is full, otherwise adds the file to the last lookup subtable.\n",
              "description": ""
            },
            "name": "addToEndOfChunks",
            "location": {
              "start": 268,
              "insert": 258,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 257,
                "end": 267
              }
            },
            "item_type": "function",
            "length": 11,
            "docLength": 10
          },
          {
            "id": "c117558c-2938-849c-2c4e-76f7d8b8f1b3",
            "ancestors": [
              "ca42b4a8-1551-e782-9c4f-ee063f96de04"
            ],
            "description": "Adds a file to the document store if the file exists and has not already been added. If the file exists, it updates its metadata and adds it to the end of the lookup and chunks lists.",
            "params": [
              {
                "name": "file",
                "default_value": null,
                "optional": false,
                "type_name": "StructuredFile*",
                "description": "Used to represent a file that can be added to the content."
              }
            ],
            "returns": {
              "type_name": "boolean*",
              "description": "1 if the file was successfully added to the lookup and chunks, and 0 otherwise."
            },
            "usage": {
              "language": "typescript",
              "code": "const docStore = new DocumentStore();\nlet file = {path:\"/path/to/file\", content:\"content of the file\"};\ndocStore.addFile(file);\n",
              "description": ""
            },
            "name": "addFile",
            "location": {
              "start": 289,
              "insert": 279,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 278,
                "end": 288
              }
            },
            "item_type": "function",
            "length": 20,
            "docLength": 10
          },
          {
            "id": "55404fb6-7114-63a3-4a47-f0b4797d6678",
            "ancestors": [
              "ca42b4a8-1551-e782-9c4f-ee063f96de04"
            ],
            "description": "Updates a file in the store by checking if it exists, loading any necessary chunks, and storing the updated file in the appropriate position within the chunk.",
            "params": [
              {
                "name": "file",
                "default_value": null,
                "optional": false,
                "type_name": "StructuredFile*",
                "description": "Used to represent a file within the application's file system, with its path serving as the reference for updating the file's status within the chunks."
              }
            ],
            "returns": {
              "type_name": "Promise<boolean>*",
              "description": "Ether *true or *false depending on whether the file was successfully updated."
            },
            "usage": {
              "language": "typescript",
              "code": "const updateFile = async (file: StructuredFile): Promise<boolean> => {\n    const documentStore = new DocumentStore(getRemote, integration);\n    await documentStore.updateFile(file);\n};\n\n// example of how the method would be called\nconst fileToUpdate = {\n    path: '/path/to/file',\n    content: 'file content here'\n}\nupdateFile(fileToUpdate);\n",
              "description": ""
            },
            "name": "updateFile",
            "location": {
              "start": 319,
              "insert": 309,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 308,
                "end": 318
              }
            },
            "item_type": "function",
            "length": 27,
            "docLength": 10
          },
          {
            "id": "d7ff2f96-db33-75b4-f64d-1929e2ecf6d2",
            "ancestors": [
              "ca42b4a8-1551-e782-9c4f-ee063f96de04"
            ],
            "description": "Returns an object containing the class's `meta` and `lookup` properties, providing a concise summary of its state.",
            "params": [],
            "returns": {
              "type_name": "Summary*",
              "description": "An object containing two properties: `meta` and `lookup`."
            },
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore(getRemote, integration);\ndocumentStore.metaTemplate = {\n  version: '1.0',\n  created_at: new Date(),\n  updated_at: new Date()\n};\ndocumentStore.lookup = ['firstName', 'lastName'];\nconst summary = documentStore.outputSummary();\n",
              "description": "\nIn this example, the end user first instantiates a `DocumentStore` class with the necessary parameters for getting remote and integrations. They then set up the metaTemplate object and the lookup array. Finally, they call the `outputSummary()` method to generate the summary of the data in the `documentStore`. The resulting summary is stored in the `summary` variable.\nNote that this is just an illustrative example and may not be applicable or suitable for any specific use case."
            },
            "name": "outputSummary",
            "location": {
              "start": 352,
              "insert": 346,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 345,
                "end": 351
              }
            },
            "item_type": "function",
            "length": 6,
            "docLength": 6
          },
          {
            "id": "93ef91ec-c0ea-eda9-8546-5ceca66eb738",
            "ancestors": [
              "ca42b4a8-1551-e782-9c4f-ee063f96de04"
            ],
            "description": "Generates an object containing key-value pairs, where each key corresponds to a chunk of the document and each value is the contents of that chunk.",
            "params": [],
            "returns": {
              "type_name": "Record<string, any>*",
              "description": "An object containing key-value pairs where the keys are string chunk paths and the values are the corresponding chunk of text."
            },
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore(getRemote, integration); // Setup instance of DocumentStore with getRemote and integration objects\ndocumentStore.CHUNK_SIZE = 20; // set chunk size to 20\n\nconst outputs: Record<string, any> = documentStore.outputChunks(); // Generate chunks using the outputChunks method\n\n",
              "description": ""
            },
            "name": "outputChunks",
            "location": {
              "start": 364,
              "insert": 358,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 357,
                "end": 363
              }
            },
            "item_type": "function",
            "length": 9,
            "docLength": 6
          }
        ]
      }
    }
  },
  {
    "name": "index.test.ts",
    "path": "tests/index.test.ts",
    "content": {
      "structured": {
        "description": "A `DocumentStore` class that manages a collection of files and their metadata. The class provides methods for loading, adding, updating, and retrieving files from the store. It also includes tests for various use cases, such as creating an empty store, setting the summary file path, loading a summary file, and adding or updating files in the store. The code uses the `StructuredFile` type and the `mockSummary` function to generate mock summaries of files.",
        "items": [
          {
            "id": "54784b16-dc93-1eaa-c648-e6a9113abc03",
            "ancestors": [],
            "description": "Resolves a promise containing metadata and lookup information for a mock API endpoint. The metadata includes creation and update timestamps, while the lookup array contains paths to two files in the `src/` directory: `index.js`, `database.js`, and `component/index.js`.",
            "params": [],
            "returns": {
              "type_name": "Object",
              "description": "A meta object containing creation and update timestamps and a list of pipelines, as well as a lookup array with paths to two files and one directory in the src directory."
            },
            "usage": {
              "language": "typescript",
              "code": "const mockSummary = () => {\n    return Promise.resolve({\n      meta: {\n        created_at: \"2024-04-08T13:50:02.790Z\",\n        updated_at: \"2024-04-08T13:50:02.790Z\",\n        pipelines: [\"cd1d3bab-03db-494c-9e03-16ee456964fb\"],\n      },\n      lookup: [[\"src/index.js\", \"src/database.js\"], [\"src/component/index.js\"]],\n    });\n  };\n",
              "description": ""
            },
            "name": "mockSummary",
            "location": {
              "start": 6,
              "insert": 6,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 9,
            "docLength": null
          },
          {
            "id": "d2c09581-f2ac-5d81-1943-78c80aecfaf5",
            "ancestors": [],
            "description": "Takes a chunk path as input and returns a resolved promise of either the mock summary or a file from the chunks array depending on the chunk path provided.",
            "params": [
              {
                "name": "chunkPath",
                "default_value": null,
                "optional": false,
                "type_name": "string",
                "description": "Used to determine which mock file to return based on its path relative to the namespace prefix."
              }
            ],
            "returns": {
              "type_name": "Promise",
              "description": "Resolved with either a mock summary or one of the chunks."
            },
            "usage": {
              "language": "typescript",
              "code": "const chunkPath = `.${NAMESPACE}/00001.json`;\ngetFileMock(chunkPath).then((data) => {\n  // data will contain the contents of the file located at chunkPath\n});\n",
              "description": ""
            },
            "name": "getFileMock",
            "location": {
              "start": 16,
              "insert": 16,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 12,
            "docLength": null
          },
          {
            "id": "42ef8453-2d77-95a8-554a-205aaf438ac1",
            "ancestors": [],
            "description": "Returns an array of objects, each representing a file or directory within a project. The objects contain information about the file's name, path, and content, including a description.",
            "params": [],
            "returns": {
              "type_name": "Object",
              "description": "An array of objects representing files and their contents. Each object in the array has three properties: name, path, and content, where content is a JSON object containing a string value representing the file's contents."
            },
            "usage": {
              "language": "typescript",
              "code": "const chunks = () => ({\n  \"00000\": [\n    {\n      name: \"mock-1\",\n      path: \"src/index.js\",\n      content: {\n        description: \"duck\",\n      },\n    },\n    {\n      name: \"mock-2\",\n      path: \"src/database.js\",\n      content: {\n        description: \"duckDB\",\n      },\n    },\n  ],\n  \"00001\": [\n    {\n      name: \"mock-3\",\n      path: \"src/component/index.js\",\n      content: {\n        description: \"Component Duck\",\n      },\n    },\n  ],\n});\n",
              "description": ""
            },
            "name": "chunks",
            "location": {
              "start": 29,
              "insert": 29,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 27,
            "docLength": null
          },
          {
            "id": "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae",
            "ancestors": [],
            "description": "Tests various features of a DocumentStore.",
            "name": null,
            "location": {
              "start": 72,
              "insert": 73,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 127,
            "docLength": null
          },
          {
            "id": "e39cefa6-6f3c-11b0-a543-efb3ad18b4be",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "Creates an instance of `DocumentStore` and calls its `outputSummary()` method, which returns a summary of the document store's contents.",
            "name": null,
            "location": {
              "start": 73,
              "insert": 74,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 7,
            "docLength": null
          },
          {
            "id": "5d73bcf9-32c3-e396-aa42-d33f685393c0",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "Creates a new instance of `DocumentStore`, passing the namespace as an argument, and resolves a promise to obtain the chunk summary path based on the namespace.",
            "name": null,
            "location": {
              "start": 80,
              "insert": 81,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 7,
            "docLength": null
          },
          {
            "id": "5189ae6a-225a-cc8e-c848-8ee549f24403",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "Loads a summary file and returns a summary object containing two items in its `lookup` property.",
            "name": null,
            "location": {
              "start": 87,
              "insert": 88,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 9,
            "docLength": null
          },
          {
            "id": "eb9de803-c44e-7086-3645-bb43e4ad1879",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "1) creates a new instance of `DocumentStore`, 2) sets its chunk size to 2, and 3) loads all chunks using the `load()` method, after which it verifies that both the summary and output chunks contain two elements each.",
            "name": null,
            "location": {
              "start": 96,
              "insert": 97,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 17,
            "docLength": null
          },
          {
            "id": "34a3eb46-440e-0b81-494c-98661494aa51",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "1) creates a new instance of `DocumentStore`, 2) sets the chunk size to 2, and 3) retrieves the file at the specified path (\"src/database.js\") using the `getFile()` method.",
            "name": null,
            "location": {
              "start": 113,
              "insert": 114,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 12,
            "docLength": null
          },
          {
            "id": "dbc7e254-f2d7-9fb6-074a-20cd2a79b475",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "* Creates a new instance of `DocumentStore` with a mock `getFile` method.\n* Calls the `getFile` method on the `DocumentStore` instance with the file path \"src/index.js\".\n* Expects an error to be thrown due to the absence of the `load` method call before accessing the file.",
            "name": null,
            "location": {
              "start": 125,
              "insert": 126,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 9,
            "docLength": null
          },
          {
            "id": "a7776b74-8dea-0d9e-d04a-c5b55b6c07d9",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "Adds a new file to a store and retrieves it back for verification.",
            "name": null,
            "location": {
              "start": 134,
              "insert": 135,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 14,
            "docLength": null
          },
          {
            "id": "7a4f7b46-c275-bc9c-0443-1eba61261138",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "1) creates a new `DocumentStore` instance, 2) sets its `CHUNK_SIZE` to a specific value, and 3) updates an existing file using the `updateFile()` method, followed by retrieving the file using the `getFile()` method and verifying its path.",
            "name": null,
            "location": {
              "start": 148,
              "insert": 149,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 14,
            "docLength": null
          },
          {
            "id": "b7d35d2d-cc97-1da7-314c-29d5ed647f1f",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "1) creates a new instance of `DocumentStore`, 2) sets properties on that instance, and 3) updates an existing file in the store by providing the same path but different content description.",
            "name": null,
            "location": {
              "start": 162,
              "insert": 163,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 18,
            "docLength": null
          },
          {
            "id": "6b9dcf34-3a0d-5681-4948-1f6642e76ff8",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "Updates an existing file in a document store by adding new content and verifying if the updated file's description matches the expected value.",
            "name": null,
            "location": {
              "start": 180,
              "insert": 181,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 18,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "IDocumentStore.d.ts",
    "path": "types/IDocumentStore.d.ts",
    "content": {
      "structured": {
        "description": "An interface for a document store that includes several properties and methods: `CHUNK_SIZE`, `namespace`, `meta`, `lookup`, and `status`. The `CHUNK_SIZE` property sets the size of chunks used for storing documents, while the `namespace` property specifies the namespace for the document store. The `meta` property provides metadata for the document store, and the `lookup` property is an array of strings representing the paths to chunks containing documents. The `status` property contains two properties: `summary`, which indicates whether the document store has a summary available, and `chunks`, which indicates whether the document store has any chunks available.",
        "items": [
          {
            "id": "780ab884-af40-379b-1348-8337e3c66a94",
            "ancestors": [],
            "description": "Defines a set of properties and methods for storing and managing documents. It includes the document chunk size, namespace, metadata, and a lookup array. Additionally, it provides a status object with summary and chunks properties.",
            "name": "IDocumentStore",
            "location": {
              "start": 3,
              "insert": 3,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 10,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Meta.d.ts",
    "path": "types/Meta.d.ts",
    "content": {
      "structured": {
        "description": "An interface called `Meta` that represents a metadata object. The interface has four properties: `version`, `created_at`, `updated_at`, and an optional property with any type of value. The `version` property is a string representing the version number, the `created_at` and `updated_at` properties are Date objects representing the creation and last update time of the metadata object.",
        "items": [
          {
            "id": "ab4e3495-19b9-a8a0-7c4f-a600389893b7",
            "ancestors": [],
            "description": "Defines a set of properties that consist of a version, creation and update dates, and arbitrary data stored under key strings.",
            "name": "Meta",
            "location": {
              "start": 1,
              "insert": 1,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 6,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "StructuredFile.d.ts",
    "path": "types/StructuredFile.d.ts",
    "content": {
      "structured": {
        "description": "An interface named StructuredFile that consists of three properties: name, path, and content. The interface represents a file with structured data, allowing for easy manipulation and storage. The content property can hold any type of data, and the other two properties provide information about the file's identity and location.",
        "items": [
          {
            "id": "2801a404-7bff-0c82-9643-0b8059ca5fcc",
            "ancestors": [],
            "description": "Defines a set of properties for a file, including its name, path, and contents.",
            "name": "StructuredFile",
            "location": {
              "start": 1,
              "insert": 1,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 5,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Summary.d.ts",
    "path": "types/Summary.d.ts",
    "content": {
      "structured": {
        "description": "An interface Summary, which consists of three properties: meta, lookup, and chunks. The meta property is of type Meta, while the lookup property is an array of strings, representing a two-dimensional matrix. The chunks property is optional and represents a list of strings, likely used for chunking the input data.",
        "items": [
          {
            "id": "026a21ea-5807-858f-2b43-e6bd784ef8dc",
            "ancestors": [],
            "description": "Defines a set of properties: `meta`, `lookup`, and `chunks`. The `meta` property is an object with additional information about the summary, while the `lookup` property is an array of arrays representing the lookup tables for each chunk. The `chunks` property can optionally be defined as an array of strings, representing the chunks of data in the summary.",
            "name": "Summary",
            "location": {
              "start": 3,
              "insert": 3,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 5,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "jest.config.js",
    "path": "jest.config.js",
    "content": {
      "structured": {
        "description": "configuration options for Jest, a popular JavaScript testing framework. The `preset` option sets the Jest preset to use, in this case \"ts-jest\". The `testEnvironment` option specifies that Jest should run tests in a Node environment. Finally, the `testMatch` option specifies which files should be searched for test files, using glob syntax to match files with extensions \".test.ts\".",
        "items": []
      }
    }
  }
]