[
  {
    "name": "index.ts",
    "path": "src/index.ts",
    "content": {
      "structured": {
        "description": "A DocumentStore class that manages structured data files, dividing each file into chunks based on a specified chunk size. The store keeps track of the lookup table and chunks, allowing for efficient retrieval and addition of files. The class provides methods for adding files, updating existing ones, and generating summaries and records of chunks.",
        "items": [
          {
            "id": "f3c4f7db-cd89-ef84-f649-e72684e525e9",
            "ancestors": [],
            "description": "Is designed to manage structured files and provide a mechanism for loading, storing, and retrieving file data, as well as generating documentation and records of chunks of code.",
            "interfaces": [
              "IDocumentStore"
            ],
            "superclass": null,
            "is_abstract": false,
            "fields": [
              {
                "name": "CHUNK_SIZE",
                "type_name": "number",
                "description": "1 by default. It determines how many files each chunk will hold before a new chunk is created, ensuring that chunks do not exceed a certain size limit."
              },
              {
                "name": "namespace",
                "type_name": "string",
                "description": "Used to store a namespace for storing documents and metadata. It seems that this namespace is used as part of the path when retrieving or storing chunks of code."
              },
              {
                "name": "meta",
                "type_name": {
                  "full": "{\n    version: string;\n    created_at: Date;\n    updated_at: Date;\n    [key: string]: any;\n  }",
                  "pattern": "object",
                  "sub": [
                    {
                      "name": "version",
                      "type_name": "string",
                      "value": null,
                      "visibility": null,
                      "is_static": false,
                      "is_optional": false,
                      "is_readonly": false
                    },
                    {
                      "name": "created_at",
                      "type_name": "Date",
                      "value": null,
                      "visibility": null,
                      "is_static": false,
                      "is_optional": false,
                      "is_readonly": false
                    },
                    {
                      "name": "updated_at",
                      "type_name": "Date",
                      "value": null,
                      "visibility": null,
                      "is_static": false,
                      "is_optional": false,
                      "is_readonly": false
                    }
                  ]
                },
                "description": "Used to store metadata about the structured file."
              },
              {
                "name": "metaTemplate",
                "type_name": {
                  "pattern": "generic",
                  "full": "Record<string, any>",
                  "name": "Record",
                  "by": [
                    "string",
                    "any"
                  ]
                },
                "description": "Not defined anywhere in this code snippet."
              },
              {
                "name": "lookup",
                "type_name": "string[][]",
                "description": "Used to store a lookup table of file paths within each chunk of the document's content."
              },
              {
                "name": "chunks",
                "type_name": "StructuredFile[][]",
                "description": "2D array of file chunks, where each chunk contains a fixed number (CHUNK_SIZE) of files. The index of the outer array represents the chunk ID, and the inner array contains the files within that chunk."
              },
              {
                "name": "content",
                "type_name": "StructuredFile[]",
                "description": "2-dimensional array, where each inner array represents a chunk of files loaded from the provider. The array is used to store the file objects that have been successfully added to the structured file."
              },
              {
                "name": "status",
                "type_name": {
                  "full": "{\n    summary: boolean;\n    chunks: boolean;\n  }",
                  "pattern": "object",
                  "sub": [
                    {
                      "name": "summary",
                      "type_name": "boolean",
                      "value": null,
                      "visibility": null,
                      "is_static": false,
                      "is_optional": false,
                      "is_readonly": false
                    },
                    {
                      "name": "chunks",
                      "type_name": "boolean",
                      "value": null,
                      "visibility": null,
                      "is_static": false,
                      "is_optional": false,
                      "is_readonly": false
                    }
                  ]
                },
                "description": "Used to keep track of the status of the document store."
              }
            ],
            "name": "DocumentStore",
            "location": {
              "start": 22,
              "insert": 22,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 352,
            "docLength": null
          },
          {
            "id": "705aa0ee-e8f4-778a-6547-32fb777359c4",
            "ancestors": [
              "f3c4f7db-cd89-ef84-f649-e72684e525e9"
            ],
            "description": "Initializes an instance with required properties such as namespace, getRemote method, and optional additional metadata. It sets default values for CHUNK_SIZE, updates meta information, and initializes various arrays and status flags for the document store.",
            "params": [
              {
                "name": "namespace",
                "type_name": "string*",
                "optional": false,
                "description": "Required for the constructor.",
                "default_value": null
              },
              {
                "name": "getRemote",
                "type_name": "(...args: any[]) => Promise<Record<any, any>>*",
                "optional": false,
                "description": "Used to fetch data from a remote source.",
                "default_value": null
              },
              {
                "name": "additionalMeta",
                "type_name": "Record<string, any>*",
                "optional": true,
                "description": "Used to add custom metadata to the object.",
                "default_value": "{}"
              }
            ],
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore(\n  'my-namespace',\n  async (...args: any[]) => {\n    // Implementation of getRemote method\n  },\n  { some: 'additional', meta: 'information' }\n);\n",
              "description": ""
            },
            "name": null,
            "location": {
              "start": 53,
              "insert": 41,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 40,
                "end": 52
              }
            },
            "item_type": "constructor",
            "length": 26,
            "docLength": 12
          },
          {
            "id": "b99de814-2260-ce80-a940-c16e80bb1d23",
            "ancestors": [
              "f3c4f7db-cd89-ef84-f649-e72684e525e9"
            ],
            "description": "Updates the `updated_at` property with a given `Date` value, effectively setting or updating the document's last updated timestamp.",
            "params": [
              {
                "name": "updated_at",
                "default_value": null,
                "optional": false,
                "type_name": "Date*",
                "description": "Used to update the `updated_at` property."
              }
            ],
            "usage": {
              "language": "typescript",
              "code": "const store = new DocumentStore();\nstore.setUpdatedAt(new Date('2022-01-01T12:00:00.000Z'));\n",
              "description": ""
            },
            "name": "setUpdatedAt",
            "location": {
              "start": 87,
              "insert": 80,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 79,
                "end": 86
              }
            },
            "item_type": "function",
            "length": 3,
            "docLength": 7
          },
          {
            "id": "c75cbeb5-3ed8-27bb-df46-e544fa9e5b58",
            "ancestors": [
              "f3c4f7db-cd89-ef84-f649-e72684e525e9"
            ],
            "description": "Retrieves and updates the summary data from the remote storage, merging it with local metadata if available, and sets the `status.summary` property to `true`.",
            "params": [],
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore(\n  async (...args) => {\n    // implementation of getRemote function\n  },\n  {\n    namespace: 'my-namespace',\n    CHUNK_SIZE: 100,\n    metaTemplate: {\n      author: '',\n      description: '',\n    },\n  }\n);\n\nawait documentStore.loadSummary();\n",
              "description": ""
            },
            "name": "loadSummary",
            "location": {
              "start": 95,
              "insert": 91,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 90,
                "end": 94
              }
            },
            "item_type": "function",
            "length": 32,
            "docLength": 4
          },
          {
            "id": "0107ad7c-1c2c-2fbd-6b4b-f8a3575e96a0",
            "ancestors": [
              "f3c4f7db-cd89-ef84-f649-e72684e525e9",
              "c75cbeb5-3ed8-27bb-df46-e544fa9e5b58"
            ],
            "description": "Updates meta properties.",
            "name": null,
            "location": {
              "start": 121,
              "insert": 122,
              "offset": " ",
              "indent": 6,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 3,
            "docLength": null
          },
          {
            "id": "4394771a-b76f-ee8f-a843-59576b1e0915",
            "ancestors": [
              "f3c4f7db-cd89-ef84-f649-e72684e525e9"
            ],
            "description": "Asynchronously loads and prepares document data for retrieval, comprising loading a summary if not already available and then loading individual chunks according to their indices in the `lookup` array.",
            "params": [],
            "usage": {
              "language": "typescript",
              "code": "const docStore = new DocumentStore(\n  async (...args: any[]) => Promise.resolve({ /* some data */ }),\n);\nawait docStore.load();\n",
              "description": ""
            },
            "name": "load",
            "location": {
              "start": 131,
              "insert": 128,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 127,
                "end": 130
              }
            },
            "item_type": "function",
            "length": 12,
            "docLength": 3
          },
          {
            "id": "c2cc3b08-0a67-9db2-6c44-0aeb541d8592",
            "ancestors": [
              "f3c4f7db-cd89-ef84-f649-e72684e525e9"
            ],
            "description": "Updates the metadata of an object by merging it with existing metadata. The `additionalMeta` parameter is a key-value pair that contains new or updated metadata properties, which are then combined with the existing metadata using the spread operator (`...`).",
            "params": [
              {
                "name": "additionalMeta",
                "default_value": null,
                "optional": false,
                "type_name": "Record<string, any>*",
                "description": "Intended to add new metadata information."
              }
            ],
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore();\ndocumentStore.updateMetadata({\n  lastUpdated: new Date(),\n  author: 'John Doe',\n});\n",
              "description": "\nThis code creates a new instance of the `DocumentStore` class, and then updates its `meta` property with additional metadata."
            },
            "name": "updateMetadata",
            "location": {
              "start": 151,
              "insert": 151,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "function",
            "length": 6,
            "docLength": null
          },
          {
            "id": "ae4527bd-df03-80aa-1b4a-4372e320dbd4",
            "ancestors": [
              "f3c4f7db-cd89-ef84-f649-e72684e525e9"
            ],
            "description": "Asynchronously loads a chunk of structured files from a remote location and updates the local content and chunks cache. If loading fails, it returns false; otherwise, it returns true.",
            "params": [
              {
                "name": "chunkIndex",
                "default_value": null,
                "optional": false,
                "type_name": "number*",
                "description": "Used to identify specific chunk for loading."
              }
            ],
            "returns": {
              "type_name": "Promise<boolean>*",
              "description": "A promise that resolves to a boolean value indicating whether the chunk was successfully loaded or not."
            },
            "usage": {
              "language": "typescript",
              "code": "documentStore.loadChunk(0).then((result) => {\n  if (result) {\n    // The chunk was loaded successfully.\n  } else {\n    // An error occurred during chunk loading.\n  }\n}).catch((error) => {\n  // Handle the error that occurred during chunk loading.\n});\n",
              "description": "\n"
            },
            "name": "loadChunk",
            "location": {
              "start": 175,
              "insert": 164,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 163,
                "end": 174
              }
            },
            "item_type": "function",
            "length": 16,
            "docLength": 11
          },
          {
            "id": "501fc0f4-312e-68b1-2446-aaa5ca6ec531",
            "ancestors": [
              "f3c4f7db-cd89-ef84-f649-e72684e525e9"
            ],
            "description": "Asynchronously retrieves a structured file from storage. It checks if the summary is loaded, loads the required chunk if necessary, and returns the requested file if found.",
            "params": [
              {
                "name": "path",
                "default_value": null,
                "optional": false,
                "type_name": "string*",
                "description": "Used to specify the file path that needs to be retrieved."
              }
            ],
            "returns": {
              "type_name": "Promise<StructuredFile | null>*",
              "description": "Either a StructuredFile object if the file exists and can be loaded successfully, or null if the file does not exist or cannot be loaded."
            },
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore();\n\ndocumentStore.loadSummary().then(() => {\n  documentStore.getFile('path/to/file.txt').then(file => {\n    // process file\n  }).catch(error => {\n    console.error(error);\n  });\n}).catch(error => {\n  console.error(error);\n});\n",
              "description": ""
            },
            "name": "getFile",
            "location": {
              "start": 201,
              "insert": 191,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 190,
                "end": 200
              }
            },
            "item_type": "function",
            "length": 23,
            "docLength": 10
          },
          {
            "id": "5df446d9-6217-0a82-e54a-8ae23293bb1c",
            "ancestors": [
              "f3c4f7db-cd89-ef84-f649-e72684e525e9"
            ],
            "description": "Adds a new path to the end of the lookup subtable. If the current subtable is full, it creates a new one; otherwise, it appends the path to the existing subtable.",
            "params": [
              {
                "name": "path",
                "default_value": null,
                "optional": false,
                "type_name": "string*",
                "description": "Used to add to the end of the lookup subtable."
              }
            ],
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore();\ndocumentStore.addToEndOfLookup('path/to/first/document');\ndocumentStore.addToEndOfLookup('path/to/second/document');\n",
              "description": "\nThis example illustrates adding two paths to the lookup array."
            },
            "name": "addToEndOfLookup",
            "location": {
              "start": 247,
              "insert": 241,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 240,
                "end": 246
              }
            },
            "item_type": "function",
            "length": 11,
            "docLength": 6
          },
          {
            "id": "d82b341b-6f2c-db96-4d45-c4e542ba876f",
            "ancestors": [
              "f3c4f7db-cd89-ef84-f649-e72684e525e9"
            ],
            "description": "Adds files to the end of existing chunks or creates a new chunk if the last one is full, ensuring that each chunk does not exceed a fixed size (`CHUNK_SIZE`). It efficiently handles file storage and organization.",
            "params": [
              {
                "name": "file",
                "default_value": null,
                "optional": false,
                "type_name": "StructuredFile*",
                "description": "Used to add to existing chunks or create new ones."
              }
            ],
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore();\n\nconst file1: StructuredFile = { /* your data */ };\nconst file2: StructuredFile = { /* your data */ };\n\ndocumentStore.addToEndOfChunks(file1);\ndocumentStore.addToEndOfChunks(file2);\n",
              "description": "\nNote that the actual implementation of `StructuredFile` is not provided, and would need to be defined separately."
            },
            "name": "addToEndOfChunks",
            "location": {
              "start": 268,
              "insert": 258,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 257,
                "end": 267
              }
            },
            "item_type": "function",
            "length": 11,
            "docLength": 10
          },
          {
            "id": "b02443ac-f4ac-11a7-6441-b9374c816d42",
            "ancestors": [
              "f3c4f7db-cd89-ef84-f649-e72684e525e9"
            ],
            "description": "Adds a file to the store, checking if it already exists and updating its content accordingly. If the file does not exist, it adds it to the end of the lookup table and chunks, then pushes it to the content array.",
            "params": [
              {
                "name": "file",
                "default_value": null,
                "optional": false,
                "type_name": "StructuredFile*",
                "description": "Required for adding a file to the content."
              }
            ],
            "returns": {
              "type_name": "boolean*",
              "description": "True if a file was successfully added and false otherwise."
            },
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore(getRemote);\ndocumentStore.load();\ndocumentStore.addFile(new StructuredFile(\"path/to/file\", \"file content\"));\n",
              "description": "\nThis code creates a new instance of the `DocumentStore` class, loads it with a remote service using `getRemote`, and then adds a file to the store."
            },
            "name": "addFile",
            "location": {
              "start": 289,
              "insert": 279,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 278,
                "end": 288
              }
            },
            "item_type": "function",
            "length": 20,
            "docLength": 10
          },
          {
            "id": "c8420c97-83ca-48a8-4b4b-c02c968dfb80",
            "ancestors": [
              "f3c4f7db-cd89-ef84-f649-e72684e525e9"
            ],
            "description": "Updates a structured file in memory by adding it to the store if it doesn't exist, or updating its content in a chunk if it does exist. It loads chunks as needed and returns a boolean indicating success.",
            "params": [
              {
                "name": "file",
                "default_value": null,
                "optional": false,
                "type_name": "StructuredFile*",
                "description": "Used to update or add a file."
              }
            ],
            "returns": {
              "type_name": "Promise<boolean>*",
              "description": "Either a boolean indicating whether the file was updated successfully (true) or an error occurred during update (false)."
            },
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore();\nconst file = {\n  path: 'test.txt',\n  content: 'Hello, world!'\n};\n\ndocumentStore.updateFile(file).then((result) => console.log(result));\n",
              "description": ""
            },
            "name": "updateFile",
            "location": {
              "start": 319,
              "insert": 309,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 308,
                "end": 318
              }
            },
            "item_type": "function",
            "length": 27,
            "docLength": 10
          },
          {
            "id": "7f53e5c3-e405-6bb5-b044-96a522784b98",
            "ancestors": [
              "f3c4f7db-cd89-ef84-f649-e72684e525e9"
            ],
            "description": "Returns an object containing two properties, `meta` and `lookup`, which are references to the corresponding instance variables. This method provides a summary of the document store's state.",
            "params": [],
            "returns": {
              "type_name": "Summary*",
              "description": "An object with two properties: meta and lookup, both containing values from this object."
            },
            "usage": {
              "language": "typescript",
              "code": "const store = new DocumentStore(getRemote, integration);\nconst summary = store.outputSummary();\n",
              "description": ""
            },
            "name": "outputSummary",
            "location": {
              "start": 352,
              "insert": 346,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 345,
                "end": 351
              }
            },
            "item_type": "function",
            "length": 6,
            "docLength": 6
          },
          {
            "id": "95c05ae1-3e9e-8a84-614c-0ddb73682150",
            "ancestors": [
              "f3c4f7db-cd89-ef84-f649-e72684e525e9"
            ],
            "description": "Breaks down the content into chunks based on the `CHUNK_SIZE`, generates keys for each chunk, and stores them in an object along with their corresponding values. It returns this object.",
            "params": [],
            "returns": {
              "type_name": "Record<string, any>*",
              "description": "An object where each key is a string and its corresponding value is of any data type."
            },
            "usage": {
              "language": "typescript",
              "code": "let documentStore = new DocumentStore();\n// set parameters for getRemote and meta data\ndocumentStore.getRemote = (...args) => Promise.resolve({/*data*/});\ndocumentStore.meta.version = '1.0';\ndocumentStore.CHUNK_SIZE = 100;\n\nconst outputs = documentStore.outputChunks();\n",
              "description": ""
            },
            "name": "outputChunks",
            "location": {
              "start": 364,
              "insert": 358,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 357,
                "end": 363
              }
            },
            "item_type": "function",
            "length": 9,
            "docLength": 6
          }
        ]
      }
    }
  },
  {
    "name": "index.test.ts",
    "path": "tests/index.test.ts",
    "content": {
      "structured": {
        "description": "A `DocumentStore` class that manages a collection of files and their metadata. The class provides methods for loading, adding, updating, and retrieving files from the store. It also includes tests for various use cases, such as creating an empty store, setting the summary file path, loading a summary file, and adding or updating files in the store. The code uses the `StructuredFile` type and the `mockSummary` function to generate mock summaries of files.",
        "items": [
          {
            "id": "54784b16-dc93-1eaa-c648-e6a9113abc03",
            "ancestors": [],
            "description": "Resolves a promise containing metadata and lookup information for a mock API endpoint. The metadata includes creation and update timestamps, while the lookup array contains paths to two files in the `src/` directory: `index.js`, `database.js`, and `component/index.js`.",
            "params": [],
            "returns": {
              "type_name": "Object",
              "description": "A meta object containing creation and update timestamps and a list of pipelines, as well as a lookup array with paths to two files and one directory in the src directory."
            },
            "usage": {
              "language": "typescript",
              "code": "const mockSummary = () => {\n    return Promise.resolve({\n      meta: {\n        created_at: \"2024-04-08T13:50:02.790Z\",\n        updated_at: \"2024-04-08T13:50:02.790Z\",\n        pipelines: [\"cd1d3bab-03db-494c-9e03-16ee456964fb\"],\n      },\n      lookup: [[\"src/index.js\", \"src/database.js\"], [\"src/component/index.js\"]],\n    });\n  };\n",
              "description": ""
            },
            "name": "mockSummary",
            "location": {
              "start": 6,
              "insert": 6,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 9,
            "docLength": null
          },
          {
            "id": "d2c09581-f2ac-5d81-1943-78c80aecfaf5",
            "ancestors": [],
            "description": "Takes a chunk path as input and returns a resolved promise of either the mock summary or a file from the chunks array depending on the chunk path provided.",
            "params": [
              {
                "name": "chunkPath",
                "default_value": null,
                "optional": false,
                "type_name": "string",
                "description": "Used to determine which mock file to return based on its path relative to the namespace prefix."
              }
            ],
            "returns": {
              "type_name": "Promise",
              "description": "Resolved with either a mock summary or one of the chunks."
            },
            "usage": {
              "language": "typescript",
              "code": "const chunkPath = `.${NAMESPACE}/00001.json`;\ngetFileMock(chunkPath).then((data) => {\n  // data will contain the contents of the file located at chunkPath\n});\n",
              "description": ""
            },
            "name": "getFileMock",
            "location": {
              "start": 16,
              "insert": 16,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 12,
            "docLength": null
          },
          {
            "id": "42ef8453-2d77-95a8-554a-205aaf438ac1",
            "ancestors": [],
            "description": "Returns an array of objects, each representing a file or directory within a project. The objects contain information about the file's name, path, and content, including a description.",
            "params": [],
            "returns": {
              "type_name": "Object",
              "description": "An array of objects representing files and their contents. Each object in the array has three properties: name, path, and content, where content is a JSON object containing a string value representing the file's contents."
            },
            "usage": {
              "language": "typescript",
              "code": "const chunks = () => ({\n  \"00000\": [\n    {\n      name: \"mock-1\",\n      path: \"src/index.js\",\n      content: {\n        description: \"duck\",\n      },\n    },\n    {\n      name: \"mock-2\",\n      path: \"src/database.js\",\n      content: {\n        description: \"duckDB\",\n      },\n    },\n  ],\n  \"00001\": [\n    {\n      name: \"mock-3\",\n      path: \"src/component/index.js\",\n      content: {\n        description: \"Component Duck\",\n      },\n    },\n  ],\n});\n",
              "description": ""
            },
            "name": "chunks",
            "location": {
              "start": 29,
              "insert": 29,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 27,
            "docLength": null
          },
          {
            "id": "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae",
            "ancestors": [],
            "description": "Tests various features of a DocumentStore.",
            "name": null,
            "location": {
              "start": 72,
              "insert": 73,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 127,
            "docLength": null
          },
          {
            "id": "e39cefa6-6f3c-11b0-a543-efb3ad18b4be",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "Creates an instance of `DocumentStore` and calls its `outputSummary()` method, which returns a summary of the document store's contents.",
            "name": null,
            "location": {
              "start": 73,
              "insert": 74,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 7,
            "docLength": null
          },
          {
            "id": "5d73bcf9-32c3-e396-aa42-d33f685393c0",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "Creates a new instance of `DocumentStore`, passing the namespace as an argument, and resolves a promise to obtain the chunk summary path based on the namespace.",
            "name": null,
            "location": {
              "start": 80,
              "insert": 81,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 7,
            "docLength": null
          },
          {
            "id": "5189ae6a-225a-cc8e-c848-8ee549f24403",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "Loads a summary file and returns a summary object containing two items in its `lookup` property.",
            "name": null,
            "location": {
              "start": 87,
              "insert": 88,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 9,
            "docLength": null
          },
          {
            "id": "eb9de803-c44e-7086-3645-bb43e4ad1879",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "1) creates a new instance of `DocumentStore`, 2) sets its chunk size to 2, and 3) loads all chunks using the `load()` method, after which it verifies that both the summary and output chunks contain two elements each.",
            "name": null,
            "location": {
              "start": 96,
              "insert": 97,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 17,
            "docLength": null
          },
          {
            "id": "34a3eb46-440e-0b81-494c-98661494aa51",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "1) creates a new instance of `DocumentStore`, 2) sets the chunk size to 2, and 3) retrieves the file at the specified path (\"src/database.js\") using the `getFile()` method.",
            "name": null,
            "location": {
              "start": 113,
              "insert": 114,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 12,
            "docLength": null
          },
          {
            "id": "dbc7e254-f2d7-9fb6-074a-20cd2a79b475",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "* Creates a new instance of `DocumentStore` with a mock `getFile` method.\n* Calls the `getFile` method on the `DocumentStore` instance with the file path \"src/index.js\".\n* Expects an error to be thrown due to the absence of the `load` method call before accessing the file.",
            "name": null,
            "location": {
              "start": 125,
              "insert": 126,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 9,
            "docLength": null
          },
          {
            "id": "a7776b74-8dea-0d9e-d04a-c5b55b6c07d9",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "Adds a new file to a store and retrieves it back for verification.",
            "name": null,
            "location": {
              "start": 134,
              "insert": 135,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 14,
            "docLength": null
          },
          {
            "id": "7a4f7b46-c275-bc9c-0443-1eba61261138",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "1) creates a new `DocumentStore` instance, 2) sets its `CHUNK_SIZE` to a specific value, and 3) updates an existing file using the `updateFile()` method, followed by retrieving the file using the `getFile()` method and verifying its path.",
            "name": null,
            "location": {
              "start": 148,
              "insert": 149,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 14,
            "docLength": null
          },
          {
            "id": "b7d35d2d-cc97-1da7-314c-29d5ed647f1f",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "1) creates a new instance of `DocumentStore`, 2) sets properties on that instance, and 3) updates an existing file in the store by providing the same path but different content description.",
            "name": null,
            "location": {
              "start": 162,
              "insert": 163,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 18,
            "docLength": null
          },
          {
            "id": "6b9dcf34-3a0d-5681-4948-1f6642e76ff8",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "Updates an existing file in a document store by adding new content and verifying if the updated file's description matches the expected value.",
            "name": null,
            "location": {
              "start": 180,
              "insert": 181,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 18,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "IDocumentStore.d.ts",
    "path": "types/IDocumentStore.d.ts",
    "content": {
      "structured": {
        "description": "An interface for a document store that includes several properties and methods: `CHUNK_SIZE`, `namespace`, `meta`, `lookup`, and `status`. The `CHUNK_SIZE` property sets the size of chunks used for storing documents, while the `namespace` property specifies the namespace for the document store. The `meta` property provides metadata for the document store, and the `lookup` property is an array of strings representing the paths to chunks containing documents. The `status` property contains two properties: `summary`, which indicates whether the document store has a summary available, and `chunks`, which indicates whether the document store has any chunks available.",
        "items": [
          {
            "id": "780ab884-af40-379b-1348-8337e3c66a94",
            "ancestors": [],
            "description": "Defines a set of properties and methods for storing and managing documents. It includes the document chunk size, namespace, metadata, and a lookup array. Additionally, it provides a status object with summary and chunks properties.",
            "name": "IDocumentStore",
            "location": {
              "start": 3,
              "insert": 3,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 10,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Meta.d.ts",
    "path": "types/Meta.d.ts",
    "content": {
      "structured": {
        "description": "An interface called `Meta` that represents a metadata object. The interface has four properties: `version`, `created_at`, `updated_at`, and an optional property with any type of value. The `version` property is a string representing the version number, the `created_at` and `updated_at` properties are Date objects representing the creation and last update time of the metadata object.",
        "items": [
          {
            "id": "ab4e3495-19b9-a8a0-7c4f-a600389893b7",
            "ancestors": [],
            "description": "Defines a set of properties that consist of a version, creation and update dates, and arbitrary data stored under key strings.",
            "name": "Meta",
            "location": {
              "start": 1,
              "insert": 1,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 6,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "StructuredFile.d.ts",
    "path": "types/StructuredFile.d.ts",
    "content": {
      "structured": {
        "description": "An interface named StructuredFile that consists of three properties: name, path, and content. The interface represents a file with structured data, allowing for easy manipulation and storage. The content property can hold any type of data, and the other two properties provide information about the file's identity and location.",
        "items": [
          {
            "id": "2801a404-7bff-0c82-9643-0b8059ca5fcc",
            "ancestors": [],
            "description": "Defines a set of properties for a file, including its name, path, and contents.",
            "name": "StructuredFile",
            "location": {
              "start": 1,
              "insert": 1,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 5,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Summary.d.ts",
    "path": "types/Summary.d.ts",
    "content": {
      "structured": {
        "description": "An interface Summary, which consists of three properties: meta, lookup, and chunks. The meta property is of type Meta, while the lookup property is an array of strings, representing a two-dimensional matrix. The chunks property is optional and represents a list of strings, likely used for chunking the input data.",
        "items": [
          {
            "id": "026a21ea-5807-858f-2b43-e6bd784ef8dc",
            "ancestors": [],
            "description": "Defines a set of properties: `meta`, `lookup`, and `chunks`. The `meta` property is an object with additional information about the summary, while the `lookup` property is an array of arrays representing the lookup tables for each chunk. The `chunks` property can optionally be defined as an array of strings, representing the chunks of data in the summary.",
            "name": "Summary",
            "location": {
              "start": 3,
              "insert": 3,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 5,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "jest.config.js",
    "path": "jest.config.js",
    "content": {
      "structured": {
        "description": "configuration options for Jest, a popular JavaScript testing framework. The `preset` option sets the Jest preset to use, in this case \"ts-jest\". The `testEnvironment` option specifies that Jest should run tests in a Node environment. Finally, the `testMatch` option specifies which files should be searched for test files, using glob syntax to match files with extensions \".test.ts\".",
        "items": []
      }
    }
  }
]