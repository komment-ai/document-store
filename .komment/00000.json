[
  {
    "name": "index.ts",
    "path": "src/index.ts",
    "content": {
      "structured": {
        "description": "A DocumentStore class that manages a collection of structured files and their associated metadata. It provides methods for adding files, updating existing files, and retrieving file data in a chunked format. The class uses an internal lookup table to efficiently locate and manage large amounts of structured data.",
        "items": [
          {
            "id": "20abaa5f-937f-59bd-cc42-fc66285ba272",
            "ancestors": [],
            "description": "Manages and organizes structured files into chunks, providing a way to load, update, and retrieve files from a remote data source while maintaining metadata about the files and their organization.",
            "interfaces": [
              "IDocumentStore"
            ],
            "superclass": null,
            "is_abstract": false,
            "fields": [
              {
                "name": "CHUNK_SIZE",
                "type_name": "number",
                "description": "100 by default, representing the maximum size of a chunk in terms of files or bytes, used for efficient storage and retrieval of large amounts of data."
              },
              {
                "name": "namespace",
                "type_name": "string",
                "description": "Used as a prefix for file paths to uniquely identify them within the document store. It serves as a namespace for the files, allowing multiple documents with similar file names to coexist in the store."
              },
              {
                "name": "meta",
                "type_name": {
                  "full": "{\n    version: string;\n    created_at: Date;\n    updated_at: Date;\n    [key: string]: any;\n  }",
                  "pattern": "object",
                  "sub": [
                    {
                      "name": "version",
                      "type_name": "string",
                      "value": null,
                      "visibility": null,
                      "is_static": false,
                      "is_optional": false,
                      "is_readonly": false
                    },
                    {
                      "name": "created_at",
                      "type_name": "Date",
                      "value": null,
                      "visibility": null,
                      "is_static": false,
                      "is_optional": false,
                      "is_readonly": false
                    },
                    {
                      "name": "updated_at",
                      "type_name": "Date",
                      "value": null,
                      "visibility": null,
                      "is_static": false,
                      "is_optional": false,
                      "is_readonly": false
                    }
                  ]
                },
                "description": "An object containing version, created_at, updated_at."
              },
              {
                "name": "metaTemplate",
                "type_name": {
                  "pattern": "generic",
                  "full": "Record<string, any>",
                  "name": "Record",
                  "by": [
                    "string",
                    "any"
                  ]
                },
                "description": "Used to specify a template for creating metadata objects."
              },
              {
                "name": "lookup",
                "type_name": "string[][]",
                "description": "Used to store subtables of file paths in a structured way, with each subtable representing a chunk and containing up to CHUNK_SIZE number of files."
              },
              {
                "name": "chunks",
                "type_name": "StructuredFile[][]",
                "description": "2D array of chunks, where each chunk is a sub-array of files, grouped by size into fixed-size groups. Each file contains metadata such as path and name."
              },
              {
                "name": "content",
                "type_name": "StructuredFile[]",
                "description": "2-dimensional array, where each inner array represents a chunk of structured files stored in the document store. The array's length corresponds to the total number of chunks."
              },
              {
                "name": "status",
                "type_name": {
                  "full": "{\n    summary: boolean;\n    chunks: boolean;\n  }",
                  "pattern": "object",
                  "sub": [
                    {
                      "name": "summary",
                      "type_name": "boolean",
                      "value": null,
                      "visibility": null,
                      "is_static": false,
                      "is_optional": false,
                      "is_readonly": false
                    },
                    {
                      "name": "chunks",
                      "type_name": "boolean",
                      "value": null,
                      "visibility": null,
                      "is_static": false,
                      "is_optional": false,
                      "is_readonly": false
                    }
                  ]
                },
                "description": "Used to check if the chunks are loaded."
              }
            ],
            "name": "DocumentStore",
            "location": {
              "start": 22,
              "insert": 22,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 352,
            "docLength": null
          },
          {
            "id": "a45b8f5a-9134-509e-014b-28c8234d9bb9",
            "ancestors": [
              "20abaa5f-937f-59bd-cc42-fc66285ba272"
            ],
            "description": "Initializes an instance with provided namespace, getRemote method, and optional additional metadata. It sets default properties like CHUNK_SIZE, updates metadata template, creates empty lists for lookup, chunks, content, and status, and validates required inputs.",
            "params": [
              {
                "name": "namespace",
                "type_name": "string*",
                "optional": false,
                "description": "Required, as indicated by the error thrown if it is not provided. It specifies the namespace for the constructed object.",
                "default_value": null
              },
              {
                "name": "getRemote",
                "type_name": "(...args: any[]) => Promise<Record<any, any>>*",
                "optional": false,
                "description": "Required, which means it should be provided when calling this function. It returns a promise that resolves to an object containing any number of key-value pairs.",
                "default_value": null
              },
              {
                "name": "additionalMeta",
                "type_name": "Record<string, any>*",
                "optional": true,
                "description": "Passed to create or update metadata for the namespace.",
                "default_value": "{}"
              }
            ],
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore('my-namespace', async (...args: any[]) => Promise.resolve({} as Record<any, any>));\n",
              "description": ""
            },
            "name": null,
            "location": {
              "start": 53,
              "insert": 41,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 40,
                "end": 52
              }
            },
            "item_type": "constructor",
            "length": 26,
            "docLength": 12
          },
          {
            "id": "eed61295-f174-17a7-ec4c-cb58fc691ef4",
            "ancestors": [
              "20abaa5f-937f-59bd-cc42-fc66285ba272"
            ],
            "description": "Updates the `updated_at` property of the `meta` object within an instance of the `DocumentStore` class with the specified `updated_at` Date value. This update operation sets the timestamp for when the document was last updated.",
            "params": [
              {
                "name": "updated_at",
                "default_value": null,
                "optional": false,
                "type_name": "Date*",
                "description": "Assigned to the `updated_at` property of an object's meta attribute."
              }
            ],
            "returns": {
              "type_name": "void",
              "description": "Indicating that it does not return any specific value."
            },
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore(getRemote, integration);\ndocumentStore.setUpdatedAt(new Date('2023-03-12T14:30:00.000Z'));\n",
              "description": ""
            },
            "name": "setUpdatedAt",
            "location": {
              "start": 87,
              "insert": 80,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 79,
                "end": 86
              }
            },
            "item_type": "function",
            "length": 3,
            "docLength": 7
          },
          {
            "id": "48aa33b4-7cd9-7a86-de43-f10383c9c83c",
            "ancestors": [
              "20abaa5f-937f-59bd-cc42-fc66285ba272"
            ],
            "description": "Loads or generates a document summary from a remote source and updates the local summary metadata. If no remote data is available, it creates an empty summary. The method then sets the local document store's version, creation date, and update date accordingly.",
            "params": [],
            "returns": {
              "type_name": "void",
              "description": "Effectively a null response as it does not explicitly return any value from its execution path."
            },
            "usage": {
              "language": "typescript",
              "code": "const store = new DocumentStore(getRemote, metaTemplate);\nstore.loadSummary().then(() => {\n  console.info(\"Loaded summary\");\n});\n",
              "description": ""
            },
            "name": "loadSummary",
            "location": {
              "start": 95,
              "insert": 91,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 90,
                "end": 94
              }
            },
            "item_type": "function",
            "length": 32,
            "docLength": 4
          },
          {
            "id": "6e8752bb-2237-30b8-a046-032d9da485d9",
            "ancestors": [
              "20abaa5f-937f-59bd-cc42-fc66285ba272",
              "48aa33b4-7cd9-7a86-de43-f10383c9c83c"
            ],
            "description": "Maps object entries to meta properties.",
            "name": null,
            "location": {
              "start": 121,
              "insert": 122,
              "offset": " ",
              "indent": 6,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 3,
            "docLength": null
          },
          {
            "id": "4367802b-6ecd-7a92-9a42-af642f0eb924",
            "ancestors": [
              "20abaa5f-937f-59bd-cc42-fc66285ba272"
            ],
            "description": "Asynchronously loads summary data and chunk indices from the `lookup` array. It then loads corresponding chunks using the `loadChunk` method, setting the `chunks` property to `true` once complete.",
            "params": [],
            "returns": {
              "type_name": "void",
              "description": "Denoted by its absence of explicit return statement."
            },
            "usage": {
              "language": "typescript",
              "code": "const store = new DocumentStore();\nstore.CHUNK_SIZE = 10;\nstore.namespace = 'namespace';\nstore.getRemote = async () => ({ data: 'mocked-data' });\nstore.meta = { version: '1.0', created_at: new Date(), updated_at: new Date() };\nstore.lookup = [['chunk-1'], ['chunk-2'], ['chunk-3']];\nawait store.load();\n",
              "description": ""
            },
            "name": "load",
            "location": {
              "start": 131,
              "insert": 128,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 127,
                "end": 130
              }
            },
            "item_type": "function",
            "length": 12,
            "docLength": 3
          },
          {
            "id": "88d9f7cd-b624-f5b3-5f4c-5258e924cc6c",
            "ancestors": [
              "20abaa5f-937f-59bd-cc42-fc66285ba272"
            ],
            "description": "Updates the metadata object by merging additional metadata with the existing metadata. This method takes an object `additionalMeta` as input and assigns it to the `meta` property of the class, overwriting any duplicate keys.",
            "params": [
              {
                "name": "additionalMeta",
                "default_value": null,
                "optional": false,
                "type_name": "Record<string, any>*",
                "description": "Expected to be an object containing metadata key-value pairs. This object will be merged with the existing `this.meta` object."
              }
            ],
            "returns": {
              "type_name": "void",
              "description": "An empty value that does not have any specific type."
            },
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore();\nconst meta = {\n  version: '1.0',\n  created_at: new Date('2022-01-01'),\n};\n\ndocumentStore.updateMetadata(meta);\n",
              "description": ""
            },
            "name": "updateMetadata",
            "location": {
              "start": 151,
              "insert": 151,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "function",
            "length": 6,
            "docLength": null
          },
          {
            "id": "9284ee7e-bae1-9ca1-d747-de4645d3c6d1",
            "ancestors": [
              "20abaa5f-937f-59bd-cc42-fc66285ba272"
            ],
            "description": "Asynchronously loads a chunk of structured files from a remote location, concatenates it with the existing content, and stores it in a cache. If loading fails, it returns false; otherwise, it returns true.",
            "params": [
              {
                "name": "chunkIndex",
                "default_value": null,
                "optional": false,
                "type_name": "number*",
                "description": "Used as an index to identify specific chunks, likely referring to their position or order within a larger dataset."
              }
            ],
            "returns": {
              "type_name": "Promise<boolean>*",
              "description": "Resolved to either true or false, indicating whether the chunk was successfully loaded or an error occurred during loading."
            },
            "usage": {
              "language": "typescript",
              "code": "async main() {\n  const documentStore = new DocumentStore();\n  await documentStore.loadChunk(0);\n}\n",
              "description": "\n\nNote: The `loadChunk` method is being called with `chunkIndex` set to 0."
            },
            "name": "loadChunk",
            "location": {
              "start": 175,
              "insert": 164,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 163,
                "end": 174
              }
            },
            "item_type": "function",
            "length": 16,
            "docLength": 11
          },
          {
            "id": "a7509732-c211-fea3-dd40-81a545469d37",
            "ancestors": [
              "20abaa5f-937f-59bd-cc42-fc66285ba272"
            ],
            "description": "Asynchronously retrieves a file from a structured storage, ensuring that the summary has been loaded and the necessary chunk is available. It calculates the chunk index and checks if the chunk is loaded; if not, it loads the chunk before returning the requested file.",
            "params": [
              {
                "name": "path",
                "default_value": null,
                "optional": false,
                "type_name": "string*",
                "description": "Required for the function to calculate the chunk it belongs to, retrieve the file index within that chunk and verify the correctness of the chunk/lookup before returning the requested file."
              }
            ],
            "returns": {
              "type_name": "Promise<StructuredFile | null>*",
              "description": "Either a structured file object if the file exists or null if it does not."
            },
            "usage": {
              "language": "typescript",
              "code": "const store = new DocumentStore(\n    // your getRemote implementation,\n    // your integration object\n);\ntry {\n    const file = await store.getFile('path/to/file');\n} catch (error) {\n    console.error(error);\n}\n",
              "description": ""
            },
            "name": "getFile",
            "location": {
              "start": 201,
              "insert": 191,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 190,
                "end": 200
              }
            },
            "item_type": "function",
            "length": 23,
            "docLength": 10
          },
          {
            "id": "6fdbf6f5-e460-7a9f-274f-3af7d6dc9963",
            "ancestors": [
              "20abaa5f-937f-59bd-cc42-fc66285ba272"
            ],
            "description": "Adds a path to the end of the lookup table. If the last subtable is full, it creates a new one; otherwise, it appends the path to the existing subtable. The lookup table stores paths and ensures efficient retrieval of related documents.",
            "params": [
              {
                "name": "path",
                "default_value": null,
                "optional": false,
                "type_name": "string*",
                "description": "Required for method execution."
              }
            ],
            "returns": {
              "type_name": "void",
              "description": "Indicating that it does not return any value."
            },
            "usage": {
              "language": "typescript",
              "code": "let store = new DocumentStore(getRemote);\nstore.addToEndOfLookup('path/to/document');\n",
              "description": "\nIn this code, an instance of the DocumentStore class named \"store\" is created with a getRemote method. Then, the addToEndOfLookup method is called on that instance to add a path to the lookup array."
            },
            "name": "addToEndOfLookup",
            "location": {
              "start": 247,
              "insert": 241,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 240,
                "end": 246
              }
            },
            "item_type": "function",
            "length": 11,
            "docLength": 6
          },
          {
            "id": "52bbb15e-46c2-ea94-2e4d-11f3213741c1",
            "ancestors": [
              "20abaa5f-937f-59bd-cc42-fc66285ba272"
            ],
            "description": "Adds a file to the end of a chunk in an array of chunks, ensuring that each chunk does not exceed a specified size (`CHUNK_SIZE`). If the last chunk is full, it creates a new one.",
            "params": [
              {
                "name": "file",
                "default_value": null,
                "optional": false,
                "type_name": "StructuredFile*",
                "description": "Implied to be an instance of the StructuredFile class, representing a structured file or chunk."
              }
            ],
            "returns": {
              "type_name": "void",
              "description": "Equivalent to nothing or undefined."
            },
            "usage": {
              "language": "typescript",
              "code": "const docStore = new DocumentStore(getRemote, integration);\ndocStore.addToEndOfChunks(file1);\ndocStore.addToEndOfChunks(file2);\n",
              "description": ""
            },
            "name": "addToEndOfChunks",
            "location": {
              "start": 268,
              "insert": 258,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 257,
                "end": 267
              }
            },
            "item_type": "function",
            "length": 11,
            "docLength": 10
          },
          {
            "id": "33e405f5-87bb-30ac-4c41-dfa39da16419",
            "ancestors": [
              "20abaa5f-937f-59bd-cc42-fc66285ba272"
            ],
            "description": "Adds a structured file to the `DocumentStore` instance, checking if the document is already present and updating it if necessary. If not, it appends the file path to lookup and chunks lists, and pushes the file to content array.",
            "params": [
              {
                "name": "file",
                "default_value": null,
                "optional": false,
                "type_name": "StructuredFile*",
                "description": "Required for adding files to the object's content. It represents an instance of a structured file that has a path property, which is checked before attempting to add the file."
              }
            ],
            "returns": {
              "type_name": "boolean*",
              "description": "True if a file is successfully added and false otherwise."
            },
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore(getRemote, integration);\ndocumentStore.load();\nconst file1 = { path: 'file1.txt', content: 'This is a test' };\ndocumentStore.addFile(file1); // Returns true if successful, false otherwise.\n",
              "description": ""
            },
            "name": "addFile",
            "location": {
              "start": 289,
              "insert": 279,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 278,
                "end": 288
              }
            },
            "item_type": "function",
            "length": 20,
            "docLength": 10
          },
          {
            "id": "84bc96c1-4111-2b81-2f4b-b6dcda429c54",
            "ancestors": [
              "20abaa5f-937f-59bd-cc42-fc66285ba272"
            ],
            "description": "Updates a file in the document store. It checks if the file exists, loads the corresponding chunk if necessary, and replaces the old file with the new one. The method returns a boolean indicating success or failure of the update operation.",
            "params": [
              {
                "name": "file",
                "default_value": null,
                "optional": false,
                "type_name": "StructuredFile*",
                "description": "Required to be non-null. If null, the function returns false."
              }
            ],
            "returns": {
              "type_name": "Promise<boolean>*",
              "description": "A promise that resolves to a boolean value. The boolean indicates whether the file was successfully updated (true) or not (false)."
            },
            "usage": {
              "language": "typescript",
              "code": "const docStore = new DocumentStore();\nconst file1: StructuredFile = {\n  path: 'path/to/file1',\n  content: 'content of file1'\n};\nconst result = await docStore.updateFile(file1);\n",
              "description": "\n\nThis example demonstrates how to create a new instance of the `DocumentStore` class and use its `updateFile` method."
            },
            "name": "updateFile",
            "location": {
              "start": 319,
              "insert": 309,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 308,
                "end": 318
              }
            },
            "item_type": "function",
            "length": 27,
            "docLength": 10
          },
          {
            "id": "31102eaa-3d44-67a5-2741-3e0a00973107",
            "ancestors": [
              "20abaa5f-937f-59bd-cc42-fc66285ba272"
            ],
            "description": "Returns an object containing two properties, `meta` and `lookup`, with values taken from the `this.meta` and `this.lookup` attributes respectively, of the `DocumentStore` class. The returned object is a summary representation of the document store's metadata and lookup information.",
            "params": [],
            "returns": {
              "type_name": "Summary*",
              "description": "An object containing two properties: meta and lookup."
            },
            "usage": {
              "language": "typescript",
              "code": "const store = new DocumentStore();\nstore.getRemote = () => Promise.resolve({ foo: 'bar' });\nconst summary = store.outputSummary();\n",
              "description": "\nThis code creates a new instance of `DocumentStore`, assigns it a dummy getRemote method and then calls the outputSummary method, storing its result in the variable named 'summary'."
            },
            "name": "outputSummary",
            "location": {
              "start": 352,
              "insert": 346,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 345,
                "end": 351
              }
            },
            "item_type": "function",
            "length": 6,
            "docLength": 6
          },
          {
            "id": "d2f4b060-bee9-f1ad-204e-9c076b20993e",
            "ancestors": [
              "20abaa5f-937f-59bd-cc42-fc66285ba272"
            ],
            "description": "Divides the content into chunks based on the `CHUNK_SIZE`, generates corresponding chunk keys, and stores these chunks in a record with their respective keys as property names. The method returns this record containing all output chunks.",
            "params": [],
            "returns": {
              "type_name": "Record<string, any>*",
              "description": "A mapping from string keys to arbitrary values. The returned record contains chunked data stored in the `outputs` object, where each key corresponds to a unique chunk identifier."
            },
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore(getRemote, integration);\nconst outputs = documentStore.outputChunks();\n",
              "description": "\nThis code initializes a DocumentStore object with getRemote and integration parameters. Then it calls the outputChunks() method to generate chunked data and assigns it to the 'outputs' variable."
            },
            "name": "outputChunks",
            "location": {
              "start": 364,
              "insert": 358,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 357,
                "end": 363
              }
            },
            "item_type": "function",
            "length": 9,
            "docLength": 6
          }
        ]
      }
    }
  },
  {
    "name": "index.test.ts",
    "path": "tests/index.test.ts",
    "content": {
      "structured": {
        "description": "A `DocumentStore` class that manages a collection of files and their metadata. The class provides methods for loading, adding, updating, and retrieving files from the store. It also includes tests for various use cases, such as creating an empty store, setting the summary file path, loading a summary file, and adding or updating files in the store. The code uses the `StructuredFile` type and the `mockSummary` function to generate mock summaries of files.",
        "items": [
          {
            "id": "54784b16-dc93-1eaa-c648-e6a9113abc03",
            "ancestors": [],
            "description": "Resolves a promise containing metadata and lookup information for a mock API endpoint. The metadata includes creation and update timestamps, while the lookup array contains paths to two files in the `src/` directory: `index.js`, `database.js`, and `component/index.js`.",
            "params": [],
            "returns": {
              "type_name": "Object",
              "description": "A meta object containing creation and update timestamps and a list of pipelines, as well as a lookup array with paths to two files and one directory in the src directory."
            },
            "usage": {
              "language": "typescript",
              "code": "const mockSummary = () => {\n    return Promise.resolve({\n      meta: {\n        created_at: \"2024-04-08T13:50:02.790Z\",\n        updated_at: \"2024-04-08T13:50:02.790Z\",\n        pipelines: [\"cd1d3bab-03db-494c-9e03-16ee456964fb\"],\n      },\n      lookup: [[\"src/index.js\", \"src/database.js\"], [\"src/component/index.js\"]],\n    });\n  };\n",
              "description": ""
            },
            "name": "mockSummary",
            "location": {
              "start": 6,
              "insert": 6,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 9,
            "docLength": null
          },
          {
            "id": "d2c09581-f2ac-5d81-1943-78c80aecfaf5",
            "ancestors": [],
            "description": "Takes a chunk path as input and returns a resolved promise of either the mock summary or a file from the chunks array depending on the chunk path provided.",
            "params": [
              {
                "name": "chunkPath",
                "default_value": null,
                "optional": false,
                "type_name": "string",
                "description": "Used to determine which mock file to return based on its path relative to the namespace prefix."
              }
            ],
            "returns": {
              "type_name": "Promise",
              "description": "Resolved with either a mock summary or one of the chunks."
            },
            "usage": {
              "language": "typescript",
              "code": "const chunkPath = `.${NAMESPACE}/00001.json`;\ngetFileMock(chunkPath).then((data) => {\n  // data will contain the contents of the file located at chunkPath\n});\n",
              "description": ""
            },
            "name": "getFileMock",
            "location": {
              "start": 16,
              "insert": 16,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 12,
            "docLength": null
          },
          {
            "id": "42ef8453-2d77-95a8-554a-205aaf438ac1",
            "ancestors": [],
            "description": "Returns an array of objects, each representing a file or directory within a project. The objects contain information about the file's name, path, and content, including a description.",
            "params": [],
            "returns": {
              "type_name": "Object",
              "description": "An array of objects representing files and their contents. Each object in the array has three properties: name, path, and content, where content is a JSON object containing a string value representing the file's contents."
            },
            "usage": {
              "language": "typescript",
              "code": "const chunks = () => ({\n  \"00000\": [\n    {\n      name: \"mock-1\",\n      path: \"src/index.js\",\n      content: {\n        description: \"duck\",\n      },\n    },\n    {\n      name: \"mock-2\",\n      path: \"src/database.js\",\n      content: {\n        description: \"duckDB\",\n      },\n    },\n  ],\n  \"00001\": [\n    {\n      name: \"mock-3\",\n      path: \"src/component/index.js\",\n      content: {\n        description: \"Component Duck\",\n      },\n    },\n  ],\n});\n",
              "description": ""
            },
            "name": "chunks",
            "location": {
              "start": 29,
              "insert": 29,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 27,
            "docLength": null
          },
          {
            "id": "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae",
            "ancestors": [],
            "description": "Tests various features of a DocumentStore.",
            "name": null,
            "location": {
              "start": 72,
              "insert": 73,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 127,
            "docLength": null
          },
          {
            "id": "e39cefa6-6f3c-11b0-a543-efb3ad18b4be",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "Creates an instance of `DocumentStore` and calls its `outputSummary()` method, which returns a summary of the document store's contents.",
            "name": null,
            "location": {
              "start": 73,
              "insert": 74,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 7,
            "docLength": null
          },
          {
            "id": "5d73bcf9-32c3-e396-aa42-d33f685393c0",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "Creates a new instance of `DocumentStore`, passing the namespace as an argument, and resolves a promise to obtain the chunk summary path based on the namespace.",
            "name": null,
            "location": {
              "start": 80,
              "insert": 81,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 7,
            "docLength": null
          },
          {
            "id": "5189ae6a-225a-cc8e-c848-8ee549f24403",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "Loads a summary file and returns a summary object containing two items in its `lookup` property.",
            "name": null,
            "location": {
              "start": 87,
              "insert": 88,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 9,
            "docLength": null
          },
          {
            "id": "eb9de803-c44e-7086-3645-bb43e4ad1879",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "1) creates a new instance of `DocumentStore`, 2) sets its chunk size to 2, and 3) loads all chunks using the `load()` method, after which it verifies that both the summary and output chunks contain two elements each.",
            "name": null,
            "location": {
              "start": 96,
              "insert": 97,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 17,
            "docLength": null
          },
          {
            "id": "34a3eb46-440e-0b81-494c-98661494aa51",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "1) creates a new instance of `DocumentStore`, 2) sets the chunk size to 2, and 3) retrieves the file at the specified path (\"src/database.js\") using the `getFile()` method.",
            "name": null,
            "location": {
              "start": 113,
              "insert": 114,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 12,
            "docLength": null
          },
          {
            "id": "dbc7e254-f2d7-9fb6-074a-20cd2a79b475",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "* Creates a new instance of `DocumentStore` with a mock `getFile` method.\n* Calls the `getFile` method on the `DocumentStore` instance with the file path \"src/index.js\".\n* Expects an error to be thrown due to the absence of the `load` method call before accessing the file.",
            "name": null,
            "location": {
              "start": 125,
              "insert": 126,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 9,
            "docLength": null
          },
          {
            "id": "a7776b74-8dea-0d9e-d04a-c5b55b6c07d9",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "Adds a new file to a store and retrieves it back for verification.",
            "name": null,
            "location": {
              "start": 134,
              "insert": 135,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 14,
            "docLength": null
          },
          {
            "id": "7a4f7b46-c275-bc9c-0443-1eba61261138",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "1) creates a new `DocumentStore` instance, 2) sets its `CHUNK_SIZE` to a specific value, and 3) updates an existing file using the `updateFile()` method, followed by retrieving the file using the `getFile()` method and verifying its path.",
            "name": null,
            "location": {
              "start": 148,
              "insert": 149,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 14,
            "docLength": null
          },
          {
            "id": "b7d35d2d-cc97-1da7-314c-29d5ed647f1f",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "1) creates a new instance of `DocumentStore`, 2) sets properties on that instance, and 3) updates an existing file in the store by providing the same path but different content description.",
            "name": null,
            "location": {
              "start": 162,
              "insert": 163,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 18,
            "docLength": null
          },
          {
            "id": "6b9dcf34-3a0d-5681-4948-1f6642e76ff8",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "Updates an existing file in a document store by adding new content and verifying if the updated file's description matches the expected value.",
            "name": null,
            "location": {
              "start": 180,
              "insert": 181,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 18,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "IDocumentStore.d.ts",
    "path": "types/IDocumentStore.d.ts",
    "content": {
      "structured": {
        "description": "An interface for a document store that includes several properties and methods: `CHUNK_SIZE`, `namespace`, `meta`, `lookup`, and `status`. The `CHUNK_SIZE` property sets the size of chunks used for storing documents, while the `namespace` property specifies the namespace for the document store. The `meta` property provides metadata for the document store, and the `lookup` property is an array of strings representing the paths to chunks containing documents. The `status` property contains two properties: `summary`, which indicates whether the document store has a summary available, and `chunks`, which indicates whether the document store has any chunks available.",
        "items": [
          {
            "id": "780ab884-af40-379b-1348-8337e3c66a94",
            "ancestors": [],
            "description": "Defines a set of properties and methods for storing and managing documents. It includes the document chunk size, namespace, metadata, and a lookup array. Additionally, it provides a status object with summary and chunks properties.",
            "name": "IDocumentStore",
            "location": {
              "start": 3,
              "insert": 3,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 10,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Meta.d.ts",
    "path": "types/Meta.d.ts",
    "content": {
      "structured": {
        "description": "An interface called `Meta` that represents a metadata object. The interface has four properties: `version`, `created_at`, `updated_at`, and an optional property with any type of value. The `version` property is a string representing the version number, the `created_at` and `updated_at` properties are Date objects representing the creation and last update time of the metadata object.",
        "items": [
          {
            "id": "ab4e3495-19b9-a8a0-7c4f-a600389893b7",
            "ancestors": [],
            "description": "Defines a set of properties that consist of a version, creation and update dates, and arbitrary data stored under key strings.",
            "name": "Meta",
            "location": {
              "start": 1,
              "insert": 1,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 6,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "StructuredFile.d.ts",
    "path": "types/StructuredFile.d.ts",
    "content": {
      "structured": {
        "description": "An interface named StructuredFile that consists of three properties: name, path, and content. The interface represents a file with structured data, allowing for easy manipulation and storage. The content property can hold any type of data, and the other two properties provide information about the file's identity and location.",
        "items": [
          {
            "id": "2801a404-7bff-0c82-9643-0b8059ca5fcc",
            "ancestors": [],
            "description": "Defines a set of properties for a file, including its name, path, and contents.",
            "name": "StructuredFile",
            "location": {
              "start": 1,
              "insert": 1,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 5,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Summary.d.ts",
    "path": "types/Summary.d.ts",
    "content": {
      "structured": {
        "description": "An interface Summary, which consists of three properties: meta, lookup, and chunks. The meta property is of type Meta, while the lookup property is an array of strings, representing a two-dimensional matrix. The chunks property is optional and represents a list of strings, likely used for chunking the input data.",
        "items": [
          {
            "id": "026a21ea-5807-858f-2b43-e6bd784ef8dc",
            "ancestors": [],
            "description": "Defines a set of properties: `meta`, `lookup`, and `chunks`. The `meta` property is an object with additional information about the summary, while the `lookup` property is an array of arrays representing the lookup tables for each chunk. The `chunks` property can optionally be defined as an array of strings, representing the chunks of data in the summary.",
            "name": "Summary",
            "location": {
              "start": 3,
              "insert": 3,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 5,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "jest.config.js",
    "path": "jest.config.js",
    "content": {
      "structured": {
        "description": "configuration options for Jest, a popular JavaScript testing framework. The `preset` option sets the Jest preset to use, in this case \"ts-jest\". The `testEnvironment` option specifies that Jest should run tests in a Node environment. Finally, the `testMatch` option specifies which files should be searched for test files, using glob syntax to match files with extensions \".test.ts\".",
        "items": []
      }
    }
  }
]