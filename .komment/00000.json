[
  {
    "name": "index.ts",
    "path": "src/index.ts",
    "content": {
      "structured": {
        "description": "A `DocumentStore` class that manages structured files, which are collections of files organized into chunks based on their size. The store allows adding and updating files, checking for file existence, and loading and retrieving chunks as needed. The class utilizes an internal lookup table to efficiently manage the chunking process and provides methods to generate summaries and extract records of code chunks from the stored content.",
        "items": [
          {
            "id": "249335bd-68db-f3bd-8547-f91e9345106a",
            "ancestors": [],
            "description": "Manages structured files, allowing for efficient storage and retrieval of file metadata and contents. It enables chunk-based loading, lookup, and updating of files, facilitating large-scale data processing and querying.",
            "interfaces": [
              "IDocumentStore"
            ],
            "superclass": null,
            "is_abstract": false,
            "fields": [
              {
                "name": "CHUNK_SIZE",
                "type_name": "number",
                "description": "2 by default. It represents the size of each chunk in terms of files, which is used to store structured files efficiently. The value can be changed as needed for better performance or memory management."
              },
              {
                "name": "namespace",
                "type_name": "string",
                "description": "Used to create a unique identifier for the documents being stored. It is used as part of the file path when storing files on the remote server."
              },
              {
                "name": "meta",
                "type_name": {
                  "full": "{\n    version: string;\n    created_at: Date;\n    updated_at: Date;\n    [key: string]: any;\n  }",
                  "pattern": "object",
                  "sub": [
                    {
                      "name": "version",
                      "type_name": "string",
                      "value": null,
                      "visibility": null,
                      "is_static": false,
                      "is_optional": false,
                      "is_readonly": false
                    },
                    {
                      "name": "created_at",
                      "type_name": "Date",
                      "value": null,
                      "visibility": null,
                      "is_static": false,
                      "is_optional": false,
                      "is_readonly": false
                    },
                    {
                      "name": "updated_at",
                      "type_name": "Date",
                      "value": null,
                      "visibility": null,
                      "is_static": false,
                      "is_optional": false,
                      "is_readonly": false
                    }
                  ]
                },
                "description": "Used to store metadata about the structured file."
              },
              {
                "name": "metaTemplate",
                "type_name": {
                  "pattern": "generic",
                  "full": "Record<string, any>",
                  "name": "Record",
                  "by": [
                    "string",
                    "any"
                  ]
                },
                "description": "Not used within the given code snippet. It seems to be a template for meta data structure."
              },
              {
                "name": "lookup",
                "type_name": "string[][]",
                "description": "Used to keep track of file paths within a structured file, with each sub-array representing a chunk containing files of a certain size."
              },
              {
                "name": "chunks",
                "type_name": "StructuredFile[][]",
                "description": "2D array, where each inner array represents a chunk, and each element within that array is a file object within that chunk. It stores chunks of files organized in arrays."
              },
              {
                "name": "content",
                "type_name": "StructuredFile[]",
                "description": "A list of files where each file contains its path, name, and other properties. It represents the actual content stored in the document store."
              },
              {
                "name": "status",
                "type_name": {
                  "full": "{\n    summary: boolean;\n    chunks: boolean;\n  }",
                  "pattern": "object",
                  "sub": [
                    {
                      "name": "summary",
                      "type_name": "boolean",
                      "value": null,
                      "visibility": null,
                      "is_static": false,
                      "is_optional": false,
                      "is_readonly": false
                    },
                    {
                      "name": "chunks",
                      "type_name": "boolean",
                      "value": null,
                      "visibility": null,
                      "is_static": false,
                      "is_optional": false,
                      "is_readonly": false
                    }
                  ]
                },
                "description": "Not used in the provided code snippet."
              }
            ],
            "name": "DocumentStore",
            "location": {
              "start": 22,
              "insert": 22,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 352,
            "docLength": null
          },
          {
            "id": "5ebc9c4e-f3cc-b187-1247-16532dd37b08",
            "ancestors": [
              "249335bd-68db-f3bd-8547-f91e9345106a"
            ],
            "description": "Initializes an instance with required parameters: namespace and getRemote method. It sets properties, such as CHUNK_SIZE, namespace, getRemote, meta, metaTemplate, lookup, chunks, content, and status. It validates the input and throws errors if namespace or getRemote is missing.",
            "params": [
              {
                "name": "namespace",
                "type_name": "string*",
                "optional": false,
                "description": "Required to be specified when constructing an instance of this class. It represents a unique identifier for the namespace of the document store.",
                "default_value": null
              },
              {
                "name": "getRemote",
                "type_name": "(...args: any[]) => Promise<Record<any, any>>*",
                "optional": false,
                "description": "Required. It returns a promise that resolves to an object with property values of type any.",
                "default_value": null
              },
              {
                "name": "additionalMeta",
                "type_name": "Record<string, any>*",
                "optional": true,
                "description": "Used to add extra metadata properties.",
                "default_value": "{}"
              }
            ],
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore('my-namespace', async (args) => {\n  // Return a promise of metadata\n  return { version: 'v1' };\n}, { integrationType: 'integration-type' });\n",
              "description": "\nThis example instantiates the `DocumentStore` class with namespace 'my-namespace', gets remote metadata, and additional meta data."
            },
            "name": null,
            "location": {
              "start": 53,
              "insert": 41,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 40,
                "end": 52
              }
            },
            "item_type": "constructor",
            "length": 26,
            "docLength": 12
          },
          {
            "id": "25021be8-61af-13b6-6e44-4d0d0e5382f9",
            "ancestors": [
              "249335bd-68db-f3bd-8547-f91e9345106a"
            ],
            "description": "Updates the `updated_at` property of the `meta` object with the provided `updated_at` date. This method appears to be part of the `DocumentStore` class, responsible for managing document metadata.",
            "params": [
              {
                "name": "updated_at",
                "default_value": null,
                "optional": false,
                "type_name": "Date*",
                "description": "Passed to set the value of `this.meta.updated_at`."
              }
            ],
            "returns": {
              "type_name": "undefined",
              "description": "A property of an object."
            },
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore(getRemote);\n\ndocumentStore.setUpdatedAt(new Date('2022-07-20T14:30:00.000Z'));\n",
              "description": ""
            },
            "name": "setUpdatedAt",
            "location": {
              "start": 87,
              "insert": 80,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 79,
                "end": 86
              }
            },
            "item_type": "function",
            "length": 3,
            "docLength": 7
          },
          {
            "id": "1cb8ca1a-6089-3c91-7344-3e3cf75a858c",
            "ancestors": [
              "249335bd-68db-f3bd-8547-f91e9345106a"
            ],
            "description": "Loads and updates the document store's metadata, lookup data, and chunks from a remote source or initializes them with default values if no data is available.",
            "params": [],
            "returns": {
              "type_name": "async",
              "description": "A promise that resolves to an object of type Summary with properties meta, lookup, and chunks."
            },
            "usage": {
              "language": "typescript",
              "code": "const store = new DocumentStore(getRemote, metaTemplate);\nstore.loadSummary();\n",
              "description": "\nIn this simple example, we're creating a new instance of `DocumentStore` with the provided `getRemote` and `metaTemplate`, then we call the `loadSummary` method to load the summary."
            },
            "name": "loadSummary",
            "location": {
              "start": 95,
              "insert": 91,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 90,
                "end": 94
              }
            },
            "item_type": "function",
            "length": 32,
            "docLength": 4
          },
          {
            "id": "36607812-b700-2c9e-f947-d8d9384adac1",
            "ancestors": [
              "249335bd-68db-f3bd-8547-f91e9345106a",
              "1cb8ca1a-6089-3c91-7344-3e3cf75a858c"
            ],
            "description": "Assigns meta values to object properties.",
            "name": null,
            "location": {
              "start": 121,
              "insert": 122,
              "offset": " ",
              "indent": 6,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 3,
            "docLength": null
          },
          {
            "id": "db3118a6-c050-de87-4844-321d0b145760",
            "ancestors": [
              "249335bd-68db-f3bd-8547-f91e9345106a"
            ],
            "description": "Loads chunks and summary of data for a document, checking if the summary has been loaded first. If not, it calls the `loadSummary` method. Then, it iterates over chunk indices and loads corresponding chunks using the `loadChunk` method. Finally, it sets the `chunks` property to `true`.",
            "params": [],
            "returns": {
              "type_name": "undefined",
              "description": "A promise that resolves to nothing."
            },
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore(getRemote, integration);\ndocumentStore.load();\n",
              "description": "\nIt initializes a new instance of the DocumentStore and then calls its load method."
            },
            "name": "load",
            "location": {
              "start": 131,
              "insert": 128,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 127,
                "end": 130
              }
            },
            "item_type": "function",
            "length": 12,
            "docLength": 3
          },
          {
            "id": "78922cc8-ce9c-fca1-4b40-19ee32bdad51",
            "ancestors": [
              "249335bd-68db-f3bd-8547-f91e9345106a"
            ],
            "description": "Updates the metadata object of a `DocumentStore` class by merging it with additional metadata provided as an argument. The resulting metadata is stored in the `meta` property of the class. This allows dynamic modification of the metadata.",
            "params": [
              {
                "name": "additionalMeta",
                "default_value": null,
                "optional": false,
                "type_name": "Record<string, any>*",
                "description": "Expected to be an object with string keys and values of any type. This object contains additional metadata that needs to be updated in the current metadata."
              }
            ],
            "returns": {
              "type_name": "unction",
              "description": "An updated meta object that combines the original meta object with the additional metadata."
            },
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore();\ndocumentStore.updateMetadata({ description: \"This is a sample description\" });\n",
              "description": "\n\nThe above code illustrates how to update metadata with additional information in a class called `DocumentStore`."
            },
            "name": "updateMetadata",
            "location": {
              "start": 151,
              "insert": 151,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "function",
            "length": 6,
            "docLength": null
          },
          {
            "id": "fd0e3f18-d519-60af-b14f-138dcf8f2f00",
            "ancestors": [
              "249335bd-68db-f3bd-8547-f91e9345106a"
            ],
            "description": "Asynchronously loads a chunk of data from a remote location, concatenates it to the existing content, and stores it in an array of chunks. If loading fails, it returns false; otherwise, it returns true indicating successful loading.",
            "params": [
              {
                "name": "chunkIndex",
                "default_value": null,
                "optional": false,
                "type_name": "number*",
                "description": "Required when calling this asynchronous function. It represents the index of the chunk to be loaded."
              }
            ],
            "returns": {
              "type_name": "Promise<boolean>*",
              "description": "Resolved to either `true` (if the chunk load is successful) or `false` (if an error occurs during loading)."
            },
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore();\ndocumentStore.CHUNK_SIZE = 10;\ndocumentStore.loadChunk(0);\n",
              "description": "\n\nThis code creates a new instance of the `DocumentStore` class and calls the `loadChunk` method to load a chunk with index 0."
            },
            "name": "loadChunk",
            "location": {
              "start": 175,
              "insert": 164,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 163,
                "end": 174
              }
            },
            "item_type": "function",
            "length": 16,
            "docLength": 11
          },
          {
            "id": "e4ad9cc2-2da0-2091-7b4e-bd0b0a6cc17e",
            "ancestors": [
              "249335bd-68db-f3bd-8547-f91e9345106a"
            ],
            "description": "Asynchronously retrieves a file from a collection of structured files, given its path. It checks if the summary has been loaded and ensures that the corresponding chunk is loaded or loaded if necessary. The file index within the chunk is also verified before returning the requested file.",
            "params": [
              {
                "name": "path",
                "default_value": null,
                "optional": false,
                "type_name": "string*",
                "description": "Required for the function to operate correctly, representing the path of the file for which structured data is requested."
              }
            ],
            "returns": {
              "type_name": "Promise<StructuredFile | null>*",
              "description": "Either a StructuredFile object or null."
            },
            "usage": {
              "language": "typescript",
              "code": "async function main() {\n    const documentStore = new DocumentStore();\n    await documentStore.loadSummary();\n    const file1 = await documentStore.getFile('path/to/file1');\n    if (file1 === null) {\n        console.error(\"File not found\");\n    } else {\n        // process the StructuredFile\n    }\n}\n",
              "description": ""
            },
            "name": "getFile",
            "location": {
              "start": 201,
              "insert": 191,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 190,
                "end": 200
              }
            },
            "item_type": "function",
            "length": 23,
            "docLength": 10
          },
          {
            "id": "842fe77c-ac67-36b1-294c-fb482d5335d1",
            "ancestors": [
              "249335bd-68db-f3bd-8547-f91e9345106a"
            ],
            "description": "Adds a given path to the end of the lookup table. If the current subtable is full, it creates a new one. Otherwise, it appends the path to the existing subtable. This approach allows efficient storage and retrieval of paths in the DocumentStore class.",
            "params": [
              {
                "name": "path",
                "default_value": null,
                "optional": false,
                "type_name": "string*",
                "description": "Required for execution."
              }
            ],
            "returns": {
              "type_name": "unction",
              "description": "Undefined since it doesn't explicitly define a return statement."
            },
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore(getRemote, integration);\ndocumentStore.addToEndOfLookup('path/to/document');\n",
              "description": ""
            },
            "name": "addToEndOfLookup",
            "location": {
              "start": 247,
              "insert": 241,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 240,
                "end": 246
              }
            },
            "item_type": "function",
            "length": 11,
            "docLength": 6
          },
          {
            "id": "11bb6b19-5d8a-5cb9-1a40-3ae81cd8a9bd",
            "ancestors": [
              "249335bd-68db-f3bd-8547-f91e9345106a"
            ],
            "description": "Adds a file to the end of the existing chunk or creates a new one if the current chunk is full, ensuring that each chunk does not exceed a specific size (`CHUNK_SIZE`).",
            "params": [
              {
                "name": "file",
                "default_value": null,
                "optional": false,
                "type_name": "StructuredFile*",
                "description": "An input variable that represents a file with structured data. It is used to determine whether it should be added to the existing chunk or create a new one."
              }
            ],
            "returns": {
              "type_name": "unction",
              "description": "Called as a higher-order function. It does not explicitly return any value, but it updates the state of an object by pushing a new file into either a newly created chunk or the last existing one."
            },
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore();\n\ndocumentStore.CHUNK_SIZE = 5;\ndocumentStore.addToEndOfChunks({ /* file object */ });\n",
              "description": "\nThis code creates a new instance of `DocumentStore`, sets `CHUNK_SIZE` to 5, and then calls the `addToEndOfChunks` method with a structured file as an argument."
            },
            "name": "addToEndOfChunks",
            "location": {
              "start": 268,
              "insert": 258,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 257,
                "end": 267
              }
            },
            "item_type": "function",
            "length": 11,
            "docLength": 10
          },
          {
            "id": "c3ddb755-2082-9fa4-fc48-35a9ee911247",
            "ancestors": [
              "249335bd-68db-f3bd-8547-f91e9345106a"
            ],
            "description": "Adds a file to the `DocumentStore`. If the store has no chunks, it throws an error. If the file exists, it updates the existing file; otherwise, it adds the new file to the end of the lookup and chunk lists and pushes it to the content array.",
            "params": [
              {
                "name": "file",
                "default_value": null,
                "optional": false,
                "type_name": "StructuredFile*",
                "description": "Required to be present and have a valid path."
              }
            ],
            "returns": {
              "type_name": "boolean*",
              "description": "`true` if the file is successfully added, and `false` otherwise, indicating whether the operation was successful or not."
            },
            "usage": {
              "language": "typescript",
              "code": "let store = new DocumentStore();\nstore.load(); // load data before adding files\nlet file1 = { path: 'path1', content: 'content1' };\nstore.addFile(file1); // successfully add a file\n\nlet file2 = { path: 'path1', content: 'newContent' };\nstore.addFile(file2); // update existing file\n",
              "description": ""
            },
            "name": "addFile",
            "location": {
              "start": 289,
              "insert": 279,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 278,
                "end": 288
              }
            },
            "item_type": "function",
            "length": 20,
            "docLength": 10
          },
          {
            "id": "b8a4e02a-a11c-e79d-e441-c76b56ba623a",
            "ancestors": [
              "249335bd-68db-f3bd-8547-f91e9345106a"
            ],
            "description": "Asynchronously updates a file's metadata in the document store. It checks if the file exists, adds it to the chunk if necessary, loads the corresponding chunk if needed, and updates the file's index in the chunk and content arrays.",
            "params": [
              {
                "name": "file",
                "default_value": null,
                "optional": false,
                "type_name": "StructuredFile*",
                "description": "Required to be present for the function to continue processing."
              }
            ],
            "returns": {
              "type_name": "Promise<boolean>*",
              "description": "A promise that resolves to either true or false."
            },
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore();\nconst file1 = {\n  path: '/path/to/file1',\n  // other relevant fields...\n};\n\ndocumentStore.updateFile(file1).then(result => {\n  if (result) console.log('File updated successfully');\n}).catch(error => {\n  console.error('Error updating file:', error);\n});\n",
              "description": ""
            },
            "name": "updateFile",
            "location": {
              "start": 319,
              "insert": 309,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 308,
                "end": 318
              }
            },
            "item_type": "function",
            "length": 27,
            "docLength": 10
          },
          {
            "id": "10394081-0463-aba0-3643-ab31b6b4b7ce",
            "ancestors": [
              "249335bd-68db-f3bd-8547-f91e9345106a"
            ],
            "description": "Returns an object containing two properties, `meta` and `lookup`, which are obtained from the current instance's `this.meta` and `this.lookup` attributes, respectively. The returned object represents a summary of the document store.",
            "params": [],
            "returns": {
              "type_name": "Summary*",
              "description": "An object containing two properties: meta and lookup, both having values inherited from this reference."
            },
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore(getRemote, integration);\nconst result = documentStore.outputSummary();\n",
              "description": ""
            },
            "name": "outputSummary",
            "location": {
              "start": 352,
              "insert": 346,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 345,
                "end": 351
              }
            },
            "item_type": "function",
            "length": 6,
            "docLength": 6
          },
          {
            "id": "ea63d1fb-c8e3-54ae-0a48-43bc9958c4a1",
            "ancestors": [
              "249335bd-68db-f3bd-8547-f91e9345106a"
            ],
            "description": "Splits the `content` property into chunks based on the `CHUNK_SIZE`, generates chunk keys, and stores each chunk in a `Record` object. The method returns this `Record` containing chunked content.",
            "params": [],
            "returns": {
              "type_name": "Record<string, any>*",
              "description": "An object where keys are strings and values can be any data type."
            },
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore();\nconst outputChunks = documentStore.outputChunks();\n// further processing of the outputChunks\n",
              "description": ""
            },
            "name": "outputChunks",
            "location": {
              "start": 364,
              "insert": 358,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 357,
                "end": 363
              }
            },
            "item_type": "function",
            "length": 9,
            "docLength": 6
          }
        ]
      }
    }
  },
  {
    "name": "index.test.ts",
    "path": "tests/index.test.ts",
    "content": {
      "structured": {
        "description": "A `DocumentStore` class that manages a collection of files and their metadata. The class provides methods for loading, adding, updating, and retrieving files from the store. It also includes tests for various use cases, such as creating an empty store, setting the summary file path, loading a summary file, and adding or updating files in the store. The code uses the `StructuredFile` type and the `mockSummary` function to generate mock summaries of files.",
        "items": [
          {
            "id": "54784b16-dc93-1eaa-c648-e6a9113abc03",
            "ancestors": [],
            "description": "Resolves a promise containing metadata and lookup information for a mock API endpoint. The metadata includes creation and update timestamps, while the lookup array contains paths to two files in the `src/` directory: `index.js`, `database.js`, and `component/index.js`.",
            "params": [],
            "returns": {
              "type_name": "Object",
              "description": "A meta object containing creation and update timestamps and a list of pipelines, as well as a lookup array with paths to two files and one directory in the src directory."
            },
            "usage": {
              "language": "typescript",
              "code": "const mockSummary = () => {\n    return Promise.resolve({\n      meta: {\n        created_at: \"2024-04-08T13:50:02.790Z\",\n        updated_at: \"2024-04-08T13:50:02.790Z\",\n        pipelines: [\"cd1d3bab-03db-494c-9e03-16ee456964fb\"],\n      },\n      lookup: [[\"src/index.js\", \"src/database.js\"], [\"src/component/index.js\"]],\n    });\n  };\n",
              "description": ""
            },
            "name": "mockSummary",
            "location": {
              "start": 6,
              "insert": 6,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 9,
            "docLength": null
          },
          {
            "id": "d2c09581-f2ac-5d81-1943-78c80aecfaf5",
            "ancestors": [],
            "description": "Takes a chunk path as input and returns a resolved promise of either the mock summary or a file from the chunks array depending on the chunk path provided.",
            "params": [
              {
                "name": "chunkPath",
                "default_value": null,
                "optional": false,
                "type_name": "string",
                "description": "Used to determine which mock file to return based on its path relative to the namespace prefix."
              }
            ],
            "returns": {
              "type_name": "Promise",
              "description": "Resolved with either a mock summary or one of the chunks."
            },
            "usage": {
              "language": "typescript",
              "code": "const chunkPath = `.${NAMESPACE}/00001.json`;\ngetFileMock(chunkPath).then((data) => {\n  // data will contain the contents of the file located at chunkPath\n});\n",
              "description": ""
            },
            "name": "getFileMock",
            "location": {
              "start": 16,
              "insert": 16,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 12,
            "docLength": null
          },
          {
            "id": "42ef8453-2d77-95a8-554a-205aaf438ac1",
            "ancestors": [],
            "description": "Returns an array of objects, each representing a file or directory within a project. The objects contain information about the file's name, path, and content, including a description.",
            "params": [],
            "returns": {
              "type_name": "Object",
              "description": "An array of objects representing files and their contents. Each object in the array has three properties: name, path, and content, where content is a JSON object containing a string value representing the file's contents."
            },
            "usage": {
              "language": "typescript",
              "code": "const chunks = () => ({\n  \"00000\": [\n    {\n      name: \"mock-1\",\n      path: \"src/index.js\",\n      content: {\n        description: \"duck\",\n      },\n    },\n    {\n      name: \"mock-2\",\n      path: \"src/database.js\",\n      content: {\n        description: \"duckDB\",\n      },\n    },\n  ],\n  \"00001\": [\n    {\n      name: \"mock-3\",\n      path: \"src/component/index.js\",\n      content: {\n        description: \"Component Duck\",\n      },\n    },\n  ],\n});\n",
              "description": ""
            },
            "name": "chunks",
            "location": {
              "start": 29,
              "insert": 29,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 27,
            "docLength": null
          },
          {
            "id": "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae",
            "ancestors": [],
            "description": "Tests various features of a DocumentStore.",
            "name": null,
            "location": {
              "start": 72,
              "insert": 73,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 127,
            "docLength": null
          },
          {
            "id": "e39cefa6-6f3c-11b0-a543-efb3ad18b4be",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "Creates an instance of `DocumentStore` and calls its `outputSummary()` method, which returns a summary of the document store's contents.",
            "name": null,
            "location": {
              "start": 73,
              "insert": 74,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 7,
            "docLength": null
          },
          {
            "id": "5d73bcf9-32c3-e396-aa42-d33f685393c0",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "Creates a new instance of `DocumentStore`, passing the namespace as an argument, and resolves a promise to obtain the chunk summary path based on the namespace.",
            "name": null,
            "location": {
              "start": 80,
              "insert": 81,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 7,
            "docLength": null
          },
          {
            "id": "5189ae6a-225a-cc8e-c848-8ee549f24403",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "Loads a summary file and returns a summary object containing two items in its `lookup` property.",
            "name": null,
            "location": {
              "start": 87,
              "insert": 88,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 9,
            "docLength": null
          },
          {
            "id": "eb9de803-c44e-7086-3645-bb43e4ad1879",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "1) creates a new instance of `DocumentStore`, 2) sets its chunk size to 2, and 3) loads all chunks using the `load()` method, after which it verifies that both the summary and output chunks contain two elements each.",
            "name": null,
            "location": {
              "start": 96,
              "insert": 97,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 17,
            "docLength": null
          },
          {
            "id": "34a3eb46-440e-0b81-494c-98661494aa51",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "1) creates a new instance of `DocumentStore`, 2) sets the chunk size to 2, and 3) retrieves the file at the specified path (\"src/database.js\") using the `getFile()` method.",
            "name": null,
            "location": {
              "start": 113,
              "insert": 114,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 12,
            "docLength": null
          },
          {
            "id": "dbc7e254-f2d7-9fb6-074a-20cd2a79b475",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "* Creates a new instance of `DocumentStore` with a mock `getFile` method.\n* Calls the `getFile` method on the `DocumentStore` instance with the file path \"src/index.js\".\n* Expects an error to be thrown due to the absence of the `load` method call before accessing the file.",
            "name": null,
            "location": {
              "start": 125,
              "insert": 126,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 9,
            "docLength": null
          },
          {
            "id": "a7776b74-8dea-0d9e-d04a-c5b55b6c07d9",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "Adds a new file to a store and retrieves it back for verification.",
            "name": null,
            "location": {
              "start": 134,
              "insert": 135,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 14,
            "docLength": null
          },
          {
            "id": "7a4f7b46-c275-bc9c-0443-1eba61261138",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "1) creates a new `DocumentStore` instance, 2) sets its `CHUNK_SIZE` to a specific value, and 3) updates an existing file using the `updateFile()` method, followed by retrieving the file using the `getFile()` method and verifying its path.",
            "name": null,
            "location": {
              "start": 148,
              "insert": 149,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 14,
            "docLength": null
          },
          {
            "id": "b7d35d2d-cc97-1da7-314c-29d5ed647f1f",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "1) creates a new instance of `DocumentStore`, 2) sets properties on that instance, and 3) updates an existing file in the store by providing the same path but different content description.",
            "name": null,
            "location": {
              "start": 162,
              "insert": 163,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 18,
            "docLength": null
          },
          {
            "id": "6b9dcf34-3a0d-5681-4948-1f6642e76ff8",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "Updates an existing file in a document store by adding new content and verifying if the updated file's description matches the expected value.",
            "name": null,
            "location": {
              "start": 180,
              "insert": 181,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 18,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "IDocumentStore.d.ts",
    "path": "types/IDocumentStore.d.ts",
    "content": {
      "structured": {
        "description": "An interface for a document store that includes several properties and methods: `CHUNK_SIZE`, `namespace`, `meta`, `lookup`, and `status`. The `CHUNK_SIZE` property sets the size of chunks used for storing documents, while the `namespace` property specifies the namespace for the document store. The `meta` property provides metadata for the document store, and the `lookup` property is an array of strings representing the paths to chunks containing documents. The `status` property contains two properties: `summary`, which indicates whether the document store has a summary available, and `chunks`, which indicates whether the document store has any chunks available.",
        "items": [
          {
            "id": "780ab884-af40-379b-1348-8337e3c66a94",
            "ancestors": [],
            "description": "Defines a set of properties and methods for storing and managing documents. It includes the document chunk size, namespace, metadata, and a lookup array. Additionally, it provides a status object with summary and chunks properties.",
            "name": "IDocumentStore",
            "location": {
              "start": 3,
              "insert": 3,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 10,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Meta.d.ts",
    "path": "types/Meta.d.ts",
    "content": {
      "structured": {
        "description": "An interface called `Meta` that represents a metadata object. The interface has four properties: `version`, `created_at`, `updated_at`, and an optional property with any type of value. The `version` property is a string representing the version number, the `created_at` and `updated_at` properties are Date objects representing the creation and last update time of the metadata object.",
        "items": [
          {
            "id": "ab4e3495-19b9-a8a0-7c4f-a600389893b7",
            "ancestors": [],
            "description": "Defines a set of properties that consist of a version, creation and update dates, and arbitrary data stored under key strings.",
            "name": "Meta",
            "location": {
              "start": 1,
              "insert": 1,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 6,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "StructuredFile.d.ts",
    "path": "types/StructuredFile.d.ts",
    "content": {
      "structured": {
        "description": "An interface named StructuredFile that consists of three properties: name, path, and content. The interface represents a file with structured data, allowing for easy manipulation and storage. The content property can hold any type of data, and the other two properties provide information about the file's identity and location.",
        "items": [
          {
            "id": "2801a404-7bff-0c82-9643-0b8059ca5fcc",
            "ancestors": [],
            "description": "Defines a set of properties for a file, including its name, path, and contents.",
            "name": "StructuredFile",
            "location": {
              "start": 1,
              "insert": 1,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 5,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Summary.d.ts",
    "path": "types/Summary.d.ts",
    "content": {
      "structured": {
        "description": "An interface Summary, which consists of three properties: meta, lookup, and chunks. The meta property is of type Meta, while the lookup property is an array of strings, representing a two-dimensional matrix. The chunks property is optional and represents a list of strings, likely used for chunking the input data.",
        "items": [
          {
            "id": "026a21ea-5807-858f-2b43-e6bd784ef8dc",
            "ancestors": [],
            "description": "Defines a set of properties: `meta`, `lookup`, and `chunks`. The `meta` property is an object with additional information about the summary, while the `lookup` property is an array of arrays representing the lookup tables for each chunk. The `chunks` property can optionally be defined as an array of strings, representing the chunks of data in the summary.",
            "name": "Summary",
            "location": {
              "start": 3,
              "insert": 3,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 5,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "jest.config.js",
    "path": "jest.config.js",
    "content": {
      "structured": {
        "description": "configuration options for Jest, a popular JavaScript testing framework. The `preset` option sets the Jest preset to use, in this case \"ts-jest\". The `testEnvironment` option specifies that Jest should run tests in a Node environment. Finally, the `testMatch` option specifies which files should be searched for test files, using glob syntax to match files with extensions \".test.ts\".",
        "items": []
      }
    }
  }
]