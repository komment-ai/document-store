[
  {
    "name": "index.ts",
    "path": "src/index.ts",
    "content": {
      "structured": {
        "description": "A `DocumentStore` class that manages adding, retrieving, and updating documents in a designated folder. It also generates high-quality documentation for the code and outputs chunks of code based on the given content. The class uses various internal arrays and objects to store chunk data, content, and other meta information.",
        "items": [
          {
            "id": "8839d365-1371-87a3-9345-7e5e9ef93a3e",
            "ancestors": [],
            "description": "Organizes and stores structured files, facilitating high-quality documentation for code. It manages chunk loading, updates status, and provides methods for adding, updating, and retrieving files.",
            "interfaces": [
              "IDocumentStore"
            ],
            "superclass": null,
            "is_abstract": false,
            "fields": [
              {
                "name": "CHUNK_SIZE",
                "type_name": "number",
                "description": "5."
              },
              {
                "name": "namespace",
                "type_name": "string",
                "description": "Required, it represents the name or identifier of the document store instance, which can be used to reference the instance in code and other systems."
              },
              {
                "name": "meta",
                "type_name": {
                  "full": "{\n    version: string;\n    created_at: Date;\n    updated_at: Date;\n    [key: string]: any;\n  }",
                  "pattern": "object",
                  "sub": [
                    {
                      "name": "version",
                      "type_name": "string",
                      "value": null,
                      "visibility": null,
                      "is_static": false,
                      "is_optional": false,
                      "is_readonly": false
                    },
                    {
                      "name": "created_at",
                      "type_name": "Date",
                      "value": null,
                      "visibility": null,
                      "is_static": false,
                      "is_optional": false,
                      "is_readonly": false
                    },
                    {
                      "name": "updated_at",
                      "type_name": "Date",
                      "value": null,
                      "visibility": null,
                      "is_static": false,
                      "is_optional": false,
                      "is_readonly": false
                    }
                  ]
                },
                "description": "Used to store metadata for the document store."
              },
              {
                "name": "metaTemplate",
                "type_name": {
                  "pattern": "generic",
                  "full": "Record<string, any>",
                  "name": "Record",
                  "by": [
                    "string",
                    "any"
                  ]
                },
                "description": "Used to specify the structure of the metadata object that stores information about the document, such as version number, creation date, updated date, etc."
              },
              {
                "name": "lookup",
                "type_name": "string[][]",
                "description": "Used to store a list of substrings that correspond to files within a particular chunk."
              },
              {
                "name": "chunks",
                "type_name": "StructuredFile[][]",
                "description": "Used to store the chunks of content from the document, which can be later accessed through the `loadChunk()` method."
              },
              {
                "name": "content",
                "type_name": "StructuredFile[]",
                "description": "Used to store an array of files that make up the content of the document."
              },
              {
                "name": "status",
                "type_name": {
                  "full": "{\n    summary: boolean;\n    chunks: boolean;\n  }",
                  "pattern": "object",
                  "sub": [
                    {
                      "name": "summary",
                      "type_name": "boolean",
                      "value": null,
                      "visibility": null,
                      "is_static": false,
                      "is_optional": false,
                      "is_readonly": false
                    },
                    {
                      "name": "chunks",
                      "type_name": "boolean",
                      "value": null,
                      "visibility": null,
                      "is_static": false,
                      "is_optional": false,
                      "is_readonly": false
                    }
                  ]
                },
                "description": "Used to track the progress of loading chunks and metadata."
              }
            ],
            "name": "DocumentStore",
            "location": {
              "start": 22,
              "insert": 22,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 352,
            "docLength": null
          },
          {
            "id": "077ac00e-bb79-ec83-1c43-bec4aa0cdfb0",
            "ancestors": [
              "8839d365-1371-87a3-9345-7e5e9ef93a3e"
            ],
            "description": "Sets up instance variables for namespace, getRemote method, chunk size, and various metadata properties, including version number, creation and update dates, and custom metadata templates.",
            "params": [
              {
                "name": "namespace",
                "type_name": "string",
                "optional": false,
                "description": "Required for initializing an instance of the class. It represents the name of the namespace where the remote data will be stored or retrieved from.",
                "default_value": null
              },
              {
                "name": "getRemote",
                "type_name": "(...args: any[]) => Promise<Record<any, any>>",
                "optional": false,
                "description": "Required for the constructor to run successfully.",
                "default_value": null
              },
              {
                "name": "additionalMeta",
                "type_name": "Record<string, any>",
                "optional": true,
                "description": "An optional field to provide additional metadata for the document.",
                "default_value": "{}"
              }
            ],
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore(\"my-namespace\", getRemote);\n",
              "description": "\nIn this example, \"my-namespace\" is the namespace of the document store, and `getRemote` is a 3rd party library or service that provides the functionality for generating high-quality documentation."
            },
            "name": null,
            "location": {
              "start": 53,
              "insert": 41,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 40,
                "end": 52
              }
            },
            "item_type": "constructor",
            "length": 26,
            "docLength": 12
          },
          {
            "id": "2aec80f4-d9c9-76a9-b34b-dc8099550122",
            "ancestors": [
              "8839d365-1371-87a3-9345-7e5e9ef93a3e"
            ],
            "description": "Updates the `updated_at` metadata field of the `DocumentStore` instance with the provided `Date`.",
            "params": [
              {
                "name": "updated_at",
                "default_value": null,
                "optional": false,
                "type_name": "Date",
                "description": "Used to update the metadata's updated_at field."
              }
            ],
            "returns": {
              "type_name": "void",
              "description": "The result of updating the `meta` object's `updated_at` property with the provided `Date`."
            },
            "usage": {
              "language": "typescript",
              "code": "const updatedAt = new Date();\ndocumentStore.setUpdatedAt(updatedAt);\n\n// documentStore.meta.updated_at will now be set to the value of updatedAt\n",
              "description": ""
            },
            "name": "setUpdatedAt",
            "location": {
              "start": 87,
              "insert": 80,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 79,
                "end": 86
              }
            },
            "item_type": "function",
            "length": 3,
            "docLength": 7
          },
          {
            "id": "c9ded360-0f0d-81b4-2240-d3ac642cd74a",
            "ancestors": [
              "8839d365-1371-87a3-9345-7e5e9ef93a3e"
            ],
            "description": "Retrieves and updates the summary information for the document store, including the chunk list and meta data, based on the remote summary information available.",
            "params": [],
            "returns": {
              "type_name": "Summary",
              "description": "An object with properties `meta`, `lookup`, and `chunks`."
            },
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore(getRemote, integration);\nawait documentStore.loadSummary();\n",
              "description": ""
            },
            "name": "loadSummary",
            "location": {
              "start": 95,
              "insert": 91,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 90,
                "end": 94
              }
            },
            "item_type": "function",
            "length": 32,
            "docLength": 4
          },
          {
            "id": "d39e3b48-db95-ee95-cd4c-368bcd16a9ea",
            "ancestors": [
              "8839d365-1371-87a3-9345-7e5e9ef93a3e",
              "c9ded360-0f0d-81b4-2240-d3ac642cd74a"
            ],
            "description": "Assigns the value of `summary.meta![key]` to `this.meta[key]` if present, otherwise assigns the value of `value`.",
            "name": null,
            "location": {
              "start": 121,
              "insert": 122,
              "offset": " ",
              "indent": 6,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 3,
            "docLength": null
          },
          {
            "id": "12e2cf58-6dc7-16a5-de48-e1431eb974b4",
            "ancestors": [
              "8839d365-1371-87a3-9345-7e5e9ef93a3e"
            ],
            "description": "Of the `DocumentStore` class loads chunks of data asynchronously based on the chunk indices stored in the `lookup` map.",
            "params": [],
            "returns": {
              "type_name": "void",
              "description": "Indicative of the fact that it does not return any value after execution."
            },
            "usage": {
              "language": "typescript",
              "code": "const ds = new DocumentStore(getRemote, integration);\nds.load();\n",
              "description": ""
            },
            "name": "load",
            "location": {
              "start": 131,
              "insert": 128,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 127,
                "end": 130
              }
            },
            "item_type": "function",
            "length": 12,
            "docLength": 3
          },
          {
            "id": "dc19c78a-3ffd-5ba7-6a4a-5ec1c80cbdf4",
            "ancestors": [
              "8839d365-1371-87a3-9345-7e5e9ef93a3e"
            ],
            "description": "Updates the metadata of an object by combining its current metadata with additional metadata provided as an argument.",
            "params": [
              {
                "name": "additionalMeta",
                "default_value": null,
                "optional": false,
                "type_name": "Record<string, any>",
                "description": "Added to the existing metadata object 'meta' of the class."
              }
            ],
            "returns": {
              "type_name": "Recordstring",
              "description": "An augmented version of the current `meta` object with additional metadata provided as the argument `additionalMeta`."
            },
            "usage": {
              "language": "typescript",
              "code": "const store = new DocumentStore(getRemote, integration);\nstore.updateMetadata({ version: '1.0.0', created_at: new Date(), updated_at: new Date() });\n",
              "description": ""
            },
            "name": "updateMetadata",
            "location": {
              "start": 151,
              "insert": 151,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "function",
            "length": 6,
            "docLength": null
          },
          {
            "id": "4fd2ca9d-57f0-51ac-5448-00512f45c3ac",
            "ancestors": [
              "8839d365-1371-87a3-9345-7e5e9ef93a3e"
            ],
            "description": "Of the `DocumentStore` class asynchronously loads a chunk of documents from the remote storage and adds them to the local content, updating the chunk cache and the content array.",
            "params": [
              {
                "name": "chunkIndex",
                "default_value": null,
                "optional": false,
                "type_name": "number",
                "description": "Representing an index of a chunk to be loaded from a remote location."
              }
            ],
            "returns": {
              "type_name": "Promiseboolean",
              "description": "True if the chunk is loaded successfully, and false otherwise."
            },
            "usage": {
              "language": "typescript",
              "code": "const myDocumentStore = new DocumentStore();\nmyDocumentStore.setGetRemote((remoteFile) => {\n    return fetch(remoteFile).then((response) => response.json());\n});\nmyDocumentStore.loadChunk(0);\n",
              "description": ""
            },
            "name": "loadChunk",
            "location": {
              "start": 175,
              "insert": 164,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 163,
                "end": 174
              }
            },
            "item_type": "function",
            "length": 16,
            "docLength": 11
          },
          {
            "id": "c1b03903-dc82-5a9d-f64a-cec32ddc0ab6",
            "ancestors": [
              "8839d365-1371-87a3-9345-7e5e9ef93a3e"
            ],
            "description": "In the `DocumentStore` class allows for retrieval of a file from a specified path, checking the file's existence and loading it from a chunk if necessary.",
            "params": [
              {
                "name": "path",
                "default_value": null,
                "optional": false,
                "type_name": "string",
                "description": "Used to specify the path of the file to be retrieved."
              }
            ],
            "returns": {
              "type_name": "StructuredFile",
              "description": "Either null or a reference to a file within a specified chunk if it exists."
            },
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore(getRemote, integration);\ndocumentStore.getFile(\"some_path\");\n",
              "description": ""
            },
            "name": "getFile",
            "location": {
              "start": 201,
              "insert": 191,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 190,
                "end": 200
              }
            },
            "item_type": "function",
            "length": 23,
            "docLength": 10
          },
          {
            "id": "b548e744-81cb-a394-9141-6d955da84755",
            "ancestors": [
              "8839d365-1371-87a3-9345-7e5e9ef93a3e"
            ],
            "description": "Updates the lookup subtable of a `DocumentStore` instance based on the provided path, appending to the end of the table if necessary.",
            "params": [
              {
                "name": "path",
                "default_value": null,
                "optional": false,
                "type_name": "string",
                "description": "Used to insert a new path into the lookup subtable."
              }
            ],
            "returns": {
              "type_name": "array",
              "description": "An array of strings containing the new path added to the end of the lookup subtable."
            },
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore(getRemote, integration);\ndocumentStore.addToEndOfLookup(\"path/to/file\");\n",
              "description": ""
            },
            "name": "addToEndOfLookup",
            "location": {
              "start": 247,
              "insert": 241,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 240,
                "end": 246
              }
            },
            "item_type": "function",
            "length": 11,
            "docLength": 6
          },
          {
            "id": "d0e95f05-36a1-8d9a-df49-d25e94c0e703",
            "ancestors": [
              "8839d365-1371-87a3-9345-7e5e9ef93a3e"
            ],
            "description": "In the `DocumentStore` class adds files to the end of chunks based on file size and chunk capacity, creating new chunks when necessary.",
            "params": [
              {
                "name": "file",
                "default_value": null,
                "optional": false,
                "type_name": "StructuredFile",
                "description": "Passed to the function for inclusion in the chunks."
              }
            ],
            "returns": {
              "type_name": "StructuredFile",
              "description": "A new StructuredFile object that contains the file added to the end of the chunks array."
            },
            "usage": {
              "language": "typescript",
              "code": "let documentStore = new DocumentStore(getRemote);\ndocumentStore.addToEndOfChunks(file);\n",
              "description": ""
            },
            "name": "addToEndOfChunks",
            "location": {
              "start": 268,
              "insert": 258,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 257,
                "end": 267
              }
            },
            "item_type": "function",
            "length": 11,
            "docLength": 10
          },
          {
            "id": "55c8ceb8-5c67-6a99-3b46-8406615e8303",
            "ancestors": [
              "8839d365-1371-87a3-9345-7e5e9ef93a3e"
            ],
            "description": "Of `DocumentStore` allows adding a file to the collection of stored files. It checks if the file exists and if the `status.chunks` property is set before adding it to the end of the lookup table and chunks list. If the file already exists, it updates its information instead of adding it again.",
            "params": [
              {
                "name": "file",
                "default_value": null,
                "optional": false,
                "type_name": "StructuredFile",
                "description": "Used to represent a file to be added to the content of the object."
              }
            ],
            "returns": {
              "type_name": "boolean",
              "description": "True when a file is successfully added to the content and false otherwise."
            },
            "usage": {
              "language": "typescript",
              "code": "const store = new DocumentStore();\nstore.getRemote = (...args) => Promise<Record<any, any>>;\nstore.metaTemplate = { version: \"1.0.0\", created_at: Date.now() };\nstore.namespace = \"my-namespace\";\n// add a file to the store\nconst file: StructuredFile = { path: \"/path/to/file\" };\nstore.addFile(file);\n",
              "description": ""
            },
            "name": "addFile",
            "location": {
              "start": 289,
              "insert": 279,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 278,
                "end": 288
              }
            },
            "item_type": "function",
            "length": 20,
            "docLength": 10
          },
          {
            "id": "98ca3ee0-f75f-c8a5-bb4d-e2018ea4ae61",
            "ancestors": [
              "8839d365-1371-87a3-9345-7e5e9ef93a3e"
            ],
            "description": "Of the `DocumentStore` class updates a file in the store by checking if it exists, loading any necessary chunks, and storing the updated file in the appropriate chunk index.",
            "params": [
              {
                "name": "file",
                "default_value": null,
                "optional": false,
                "type_name": "StructuredFile",
                "description": "Passed as an argument to the function for updating a file."
              }
            ],
            "returns": {
              "type_name": "Promiseboolean",
              "description": "Ether true or false depending on whether the file was updated successfully or not."
            },
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore(getRemote, integration);\n\ndocumentStore.updateFile({path:'index.js', content:'new content'});\n",
              "description": ""
            },
            "name": "updateFile",
            "location": {
              "start": 319,
              "insert": 309,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 308,
                "end": 318
              }
            },
            "item_type": "function",
            "length": 27,
            "docLength": 10
          },
          {
            "id": "d578c872-a362-1e96-cd4d-19d8753f131f",
            "ancestors": [
              "8839d365-1371-87a3-9345-7e5e9ef93a3e"
            ],
            "description": "Returns an object containing the `meta` and `lookup` properties of the `DocumentStore` instance.",
            "params": [],
            "returns": {
              "type_name": "Summary",
              "description": "An object containing two properties: `meta` and `lookup`."
            },
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore(getRemote, integration);\ndocumentStore.outputSummary();\n",
              "description": "\nIn this example, we create a new instance of the `DocumentStore` class and pass in two parameters to its constructor: `getRemote` and `integration`. We then call the `outputSummary()` method on the newly created object, which returns a summary of the document store's metadata."
            },
            "name": "outputSummary",
            "location": {
              "start": 352,
              "insert": 346,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 345,
                "end": 351
              }
            },
            "item_type": "function",
            "length": 6,
            "docLength": 6
          },
          {
            "id": "290fe286-de31-a596-0d45-4bbb84d82c07",
            "ancestors": [
              "8839d365-1371-87a3-9345-7e5e9ef93a3e"
            ],
            "description": "Generates and returns a record of chunks extracted from a document store's content, using a specified chunk size and keying scheme.",
            "params": [],
            "returns": {
              "type_name": "Recordstring",
              "description": "An object with keys that correspond to chunk paths and values that are chunks of the original content."
            },
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore(getRemote, integration);\ndocumentStore.outputChunks();\n",
              "description": ""
            },
            "name": "outputChunks",
            "location": {
              "start": 364,
              "insert": 358,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 357,
                "end": 363
              }
            },
            "item_type": "function",
            "length": 9,
            "docLength": 6
          }
        ]
      }
    }
  },
  {
    "name": "index.test.ts",
    "path": "tests/index.test.ts",
    "content": {
      "structured": {
        "description": "A `DocumentStore` class that manages a collection of files and their metadata. The class provides methods for loading, adding, updating, and retrieving files from the store. It also includes tests for various use cases, such as creating an empty store, setting the summary file path, loading a summary file, and adding or updating files in the store. The code uses the `StructuredFile` type and the `mockSummary` function to generate mock summaries of files.",
        "items": [
          {
            "id": "54784b16-dc93-1eaa-c648-e6a9113abc03",
            "ancestors": [],
            "description": "Resolves a promise containing metadata and lookup information for a mock API endpoint. The metadata includes creation and update timestamps, while the lookup array contains paths to two files in the `src/` directory: `index.js`, `database.js`, and `component/index.js`.",
            "params": [],
            "returns": {
              "type_name": "Object",
              "description": "A meta object containing creation and update timestamps and a list of pipelines, as well as a lookup array with paths to two files and one directory in the src directory."
            },
            "usage": {
              "language": "typescript",
              "code": "const mockSummary = () => {\n    return Promise.resolve({\n      meta: {\n        created_at: \"2024-04-08T13:50:02.790Z\",\n        updated_at: \"2024-04-08T13:50:02.790Z\",\n        pipelines: [\"cd1d3bab-03db-494c-9e03-16ee456964fb\"],\n      },\n      lookup: [[\"src/index.js\", \"src/database.js\"], [\"src/component/index.js\"]],\n    });\n  };\n",
              "description": ""
            },
            "name": "mockSummary",
            "location": {
              "start": 6,
              "insert": 6,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 9,
            "docLength": null
          },
          {
            "id": "d2c09581-f2ac-5d81-1943-78c80aecfaf5",
            "ancestors": [],
            "description": "Takes a chunk path as input and returns a resolved promise of either the mock summary or a file from the chunks array depending on the chunk path provided.",
            "params": [
              {
                "name": "chunkPath",
                "default_value": null,
                "optional": false,
                "type_name": "string",
                "description": "Used to determine which mock file to return based on its path relative to the namespace prefix."
              }
            ],
            "returns": {
              "type_name": "Promise",
              "description": "Resolved with either a mock summary or one of the chunks."
            },
            "usage": {
              "language": "typescript",
              "code": "const chunkPath = `.${NAMESPACE}/00001.json`;\ngetFileMock(chunkPath).then((data) => {\n  // data will contain the contents of the file located at chunkPath\n});\n",
              "description": ""
            },
            "name": "getFileMock",
            "location": {
              "start": 16,
              "insert": 16,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 12,
            "docLength": null
          },
          {
            "id": "42ef8453-2d77-95a8-554a-205aaf438ac1",
            "ancestors": [],
            "description": "Returns an array of objects, each representing a file or directory within a project. The objects contain information about the file's name, path, and content, including a description.",
            "params": [],
            "returns": {
              "type_name": "Object",
              "description": "An array of objects representing files and their contents. Each object in the array has three properties: name, path, and content, where content is a JSON object containing a string value representing the file's contents."
            },
            "usage": {
              "language": "typescript",
              "code": "const chunks = () => ({\n  \"00000\": [\n    {\n      name: \"mock-1\",\n      path: \"src/index.js\",\n      content: {\n        description: \"duck\",\n      },\n    },\n    {\n      name: \"mock-2\",\n      path: \"src/database.js\",\n      content: {\n        description: \"duckDB\",\n      },\n    },\n  ],\n  \"00001\": [\n    {\n      name: \"mock-3\",\n      path: \"src/component/index.js\",\n      content: {\n        description: \"Component Duck\",\n      },\n    },\n  ],\n});\n",
              "description": ""
            },
            "name": "chunks",
            "location": {
              "start": 29,
              "insert": 29,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 27,
            "docLength": null
          },
          {
            "id": "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae",
            "ancestors": [],
            "description": "Tests various features of a DocumentStore.",
            "name": null,
            "location": {
              "start": 72,
              "insert": 73,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 127,
            "docLength": null
          },
          {
            "id": "e39cefa6-6f3c-11b0-a543-efb3ad18b4be",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "Creates an instance of `DocumentStore` and calls its `outputSummary()` method, which returns a summary of the document store's contents.",
            "name": null,
            "location": {
              "start": 73,
              "insert": 74,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 7,
            "docLength": null
          },
          {
            "id": "5d73bcf9-32c3-e396-aa42-d33f685393c0",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "Creates a new instance of `DocumentStore`, passing the namespace as an argument, and resolves a promise to obtain the chunk summary path based on the namespace.",
            "name": null,
            "location": {
              "start": 80,
              "insert": 81,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 7,
            "docLength": null
          },
          {
            "id": "5189ae6a-225a-cc8e-c848-8ee549f24403",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "Loads a summary file and returns a summary object containing two items in its `lookup` property.",
            "name": null,
            "location": {
              "start": 87,
              "insert": 88,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 9,
            "docLength": null
          },
          {
            "id": "eb9de803-c44e-7086-3645-bb43e4ad1879",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "1) creates a new instance of `DocumentStore`, 2) sets its chunk size to 2, and 3) loads all chunks using the `load()` method, after which it verifies that both the summary and output chunks contain two elements each.",
            "name": null,
            "location": {
              "start": 96,
              "insert": 97,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 17,
            "docLength": null
          },
          {
            "id": "34a3eb46-440e-0b81-494c-98661494aa51",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "1) creates a new instance of `DocumentStore`, 2) sets the chunk size to 2, and 3) retrieves the file at the specified path (\"src/database.js\") using the `getFile()` method.",
            "name": null,
            "location": {
              "start": 113,
              "insert": 114,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 12,
            "docLength": null
          },
          {
            "id": "dbc7e254-f2d7-9fb6-074a-20cd2a79b475",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "* Creates a new instance of `DocumentStore` with a mock `getFile` method.\n* Calls the `getFile` method on the `DocumentStore` instance with the file path \"src/index.js\".\n* Expects an error to be thrown due to the absence of the `load` method call before accessing the file.",
            "name": null,
            "location": {
              "start": 125,
              "insert": 126,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 9,
            "docLength": null
          },
          {
            "id": "a7776b74-8dea-0d9e-d04a-c5b55b6c07d9",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "Adds a new file to a store and retrieves it back for verification.",
            "name": null,
            "location": {
              "start": 134,
              "insert": 135,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 14,
            "docLength": null
          },
          {
            "id": "7a4f7b46-c275-bc9c-0443-1eba61261138",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "1) creates a new `DocumentStore` instance, 2) sets its `CHUNK_SIZE` to a specific value, and 3) updates an existing file using the `updateFile()` method, followed by retrieving the file using the `getFile()` method and verifying its path.",
            "name": null,
            "location": {
              "start": 148,
              "insert": 149,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 14,
            "docLength": null
          },
          {
            "id": "b7d35d2d-cc97-1da7-314c-29d5ed647f1f",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "1) creates a new instance of `DocumentStore`, 2) sets properties on that instance, and 3) updates an existing file in the store by providing the same path but different content description.",
            "name": null,
            "location": {
              "start": 162,
              "insert": 163,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 18,
            "docLength": null
          },
          {
            "id": "6b9dcf34-3a0d-5681-4948-1f6642e76ff8",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "Updates an existing file in a document store by adding new content and verifying if the updated file's description matches the expected value.",
            "name": null,
            "location": {
              "start": 180,
              "insert": 181,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 18,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "IDocumentStore.d.ts",
    "path": "types/IDocumentStore.d.ts",
    "content": {
      "structured": {
        "description": "An interface for a document store that includes several properties and methods: `CHUNK_SIZE`, `namespace`, `meta`, `lookup`, and `status`. The `CHUNK_SIZE` property sets the size of chunks used for storing documents, while the `namespace` property specifies the namespace for the document store. The `meta` property provides metadata for the document store, and the `lookup` property is an array of strings representing the paths to chunks containing documents. The `status` property contains two properties: `summary`, which indicates whether the document store has a summary available, and `chunks`, which indicates whether the document store has any chunks available.",
        "items": [
          {
            "id": "780ab884-af40-379b-1348-8337e3c66a94",
            "ancestors": [],
            "description": "Defines a set of properties and methods for storing and managing documents. It includes the document chunk size, namespace, metadata, and a lookup array. Additionally, it provides a status object with summary and chunks properties.",
            "name": "IDocumentStore",
            "location": {
              "start": 3,
              "insert": 3,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 10,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Meta.d.ts",
    "path": "types/Meta.d.ts",
    "content": {
      "structured": {
        "description": "An interface called `Meta` that represents a metadata object. The interface has four properties: `version`, `created_at`, `updated_at`, and an optional property with any type of value. The `version` property is a string representing the version number, the `created_at` and `updated_at` properties are Date objects representing the creation and last update time of the metadata object.",
        "items": [
          {
            "id": "ab4e3495-19b9-a8a0-7c4f-a600389893b7",
            "ancestors": [],
            "description": "Defines a set of properties that consist of a version, creation and update dates, and arbitrary data stored under key strings.",
            "name": "Meta",
            "location": {
              "start": 1,
              "insert": 1,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 6,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "StructuredFile.d.ts",
    "path": "types/StructuredFile.d.ts",
    "content": {
      "structured": {
        "description": "An interface named StructuredFile that consists of three properties: name, path, and content. The interface represents a file with structured data, allowing for easy manipulation and storage. The content property can hold any type of data, and the other two properties provide information about the file's identity and location.",
        "items": [
          {
            "id": "2801a404-7bff-0c82-9643-0b8059ca5fcc",
            "ancestors": [],
            "description": "Defines a set of properties for a file, including its name, path, and contents.",
            "name": "StructuredFile",
            "location": {
              "start": 1,
              "insert": 1,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 5,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Summary.d.ts",
    "path": "types/Summary.d.ts",
    "content": {
      "structured": {
        "description": "An interface Summary, which consists of three properties: meta, lookup, and chunks. The meta property is of type Meta, while the lookup property is an array of strings, representing a two-dimensional matrix. The chunks property is optional and represents a list of strings, likely used for chunking the input data.",
        "items": [
          {
            "id": "026a21ea-5807-858f-2b43-e6bd784ef8dc",
            "ancestors": [],
            "description": "Defines a set of properties: `meta`, `lookup`, and `chunks`. The `meta` property is an object with additional information about the summary, while the `lookup` property is an array of arrays representing the lookup tables for each chunk. The `chunks` property can optionally be defined as an array of strings, representing the chunks of data in the summary.",
            "name": "Summary",
            "location": {
              "start": 3,
              "insert": 3,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 5,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "jest.config.js",
    "path": "jest.config.js",
    "content": {
      "structured": {
        "description": "configuration options for Jest, a popular JavaScript testing framework. The `preset` option sets the Jest preset to use, in this case \"ts-jest\". The `testEnvironment` option specifies that Jest should run tests in a Node environment. Finally, the `testMatch` option specifies which files should be searched for test files, using glob syntax to match files with extensions \".test.ts\".",
        "items": []
      }
    }
  }
]