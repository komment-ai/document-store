[
  {
    "name": "index.ts",
    "path": "src/index.ts",
    "content": {
      "structured": {
        "description": "A DocumentStore class that manages structured data in chunks, ensuring each chunk contains files of a certain size. It allows for efficient insertion and updating of files, providing high-level functions such as `addFile`, `updateFile`, `outputSummary`, and `outputChunks`. The class utilizes JavaScript's built-in Map, Array, and Promise features to optimize storage and retrieval operations.",
        "items": [
          {
            "id": "c2cf8602-37f8-e3a9-8044-7ad6893a539d",
            "ancestors": [],
            "description": "Manages a collection of structured files (e.g., code chunks) and provides methods for loading, storing, updating, and retrieving files. It maintains metadata, lookup tables, and chunked storage to efficiently manage large collections of files.",
            "interfaces": [
              "IDocumentStore"
            ],
            "superclass": null,
            "is_abstract": false,
            "fields": [
              {
                "name": "CHUNK_SIZE",
                "type_name": "number",
                "description": "1024 by default. It determines how many files can be stored in a single chunk, which affects how often new chunks need to be loaded or created."
              },
              {
                "name": "namespace",
                "type_name": "string",
                "description": "Used to create a unique identifier for each structured file, which helps differentiate between files with the same name but different namespaces."
              },
              {
                "name": "meta",
                "type_name": {
                  "full": "{\n    version: string;\n    created_at: Date;\n    updated_at: Date;\n    [key: string]: any;\n  }",
                  "pattern": "object",
                  "sub": [
                    {
                      "name": "version",
                      "type_name": "string",
                      "value": null,
                      "visibility": null,
                      "is_static": false,
                      "is_optional": false,
                      "is_readonly": false
                    },
                    {
                      "name": "created_at",
                      "type_name": "Date",
                      "value": null,
                      "visibility": null,
                      "is_static": false,
                      "is_optional": false,
                      "is_readonly": false
                    },
                    {
                      "name": "updated_at",
                      "type_name": "Date",
                      "value": null,
                      "visibility": null,
                      "is_static": false,
                      "is_optional": false,
                      "is_readonly": false
                    }
                  ]
                },
                "description": "Used to store the metadata of a document."
              },
              {
                "name": "metaTemplate",
                "type_name": {
                  "pattern": "generic",
                  "full": "Record<string, any>",
                  "name": "Record",
                  "by": [
                    "string",
                    "any"
                  ]
                },
                "description": "Not shown in the given code snippet."
              },
              {
                "name": "lookup",
                "type_name": "string[][]",
                "description": "2D array where each sub-array represents a chunk of files, and each element within a sub-array is a file path hashed to be unique for that chunk."
              },
              {
                "name": "chunks",
                "type_name": "StructuredFile[][]",
                "description": "2D array where each inner array represents a chunk of files. The `chunks` attribute stores chunks of files loaded from a remote provider or updated through file additions/removals."
              },
              {
                "name": "content",
                "type_name": "StructuredFile[]",
                "description": "Used to store the actual files (as a sequence of chunks) that are loaded from a provider. It's an array where each element represents a chunk of files, which is concatenated with the next chunk when loading from a provider."
              },
              {
                "name": "status",
                "type_name": {
                  "full": "{\n    summary: boolean;\n    chunks: boolean;\n  }",
                  "pattern": "object",
                  "sub": [
                    {
                      "name": "summary",
                      "type_name": "boolean",
                      "value": null,
                      "visibility": null,
                      "is_static": false,
                      "is_optional": false,
                      "is_readonly": false
                    },
                    {
                      "name": "chunks",
                      "type_name": "boolean",
                      "value": null,
                      "visibility": null,
                      "is_static": false,
                      "is_optional": false,
                      "is_readonly": false
                    }
                  ]
                },
                "description": "Used to track the status of a document."
              }
            ],
            "name": "DocumentStore",
            "location": {
              "start": 22,
              "insert": 22,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 352,
            "docLength": null
          },
          {
            "id": "86128721-b0a1-298a-0842-cf7e6d716572",
            "ancestors": [
              "c2cf8602-37f8-e3a9-8044-7ad6893a539d"
            ],
            "description": "Initializes an instance with required namespace and getRemote method, and optional additional meta data. It sets properties such as CHUNK_SIZE, namespace, getRemote, meta, metaTemplate, lookup, chunks, content, and status.",
            "params": [
              {
                "name": "namespace",
                "type_name": "string*",
                "optional": false,
                "description": "Required, as indicated by the throw error if it is not provided. It is used to set the namespace property of the object instance.",
                "default_value": null
              },
              {
                "name": "getRemote",
                "type_name": "(...args: any[]) => Promise<Record<any, any>>*",
                "optional": false,
                "description": "Required to be passed to the constructor.",
                "default_value": null
              },
              {
                "name": "additionalMeta",
                "type_name": "Record<string, any>*",
                "optional": true,
                "description": "Used to provide additional metadata.",
                "default_value": "{}"
              }
            ],
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore(\"my-namespace\", async () => {\n  // code here\n}, { myMetaKey: \"my-meta-value\" });\n",
              "description": ""
            },
            "name": null,
            "location": {
              "start": 53,
              "insert": 41,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 40,
                "end": 52
              }
            },
            "item_type": "constructor",
            "length": 26,
            "docLength": 12
          },
          {
            "id": "a4d83aa3-b308-58a7-bd4e-bc8431268926",
            "ancestors": [
              "c2cf8602-37f8-e3a9-8044-7ad6893a539d"
            ],
            "description": "Updates the `updated_at` property of the `meta` object within the `DocumentStore` class, setting it to the provided `Date` value.",
            "params": [
              {
                "name": "updated_at",
                "default_value": null,
                "optional": false,
                "type_name": "Date*",
                "description": "Assigned to the property `updated_at` of the object `this.meta`."
              }
            ],
            "returns": {
              "type_name": "void",
              "description": "Equivalent to nothing or undefined."
            },
            "usage": {
              "language": "typescript",
              "code": "const store = new DocumentStore(getRemote, integration);\nstore.setUpdatedAt(new Date('2023-02-20T14:30:00.000Z'));\n",
              "description": ""
            },
            "name": "setUpdatedAt",
            "location": {
              "start": 87,
              "insert": 80,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 79,
                "end": 86
              }
            },
            "item_type": "function",
            "length": 3,
            "docLength": 7
          },
          {
            "id": "4fd7d85e-3281-68a5-8344-c181f3798353",
            "ancestors": [
              "c2cf8602-37f8-e3a9-8044-7ad6893a539d"
            ],
            "description": "Loads and updates the document store's metadata, lookup data, and chunk information from a remote source or initializes with default values if no data is available.",
            "params": [],
            "returns": {
              "type_name": "void",
              "description": "A special type that represents the absence of any object value. It does not explicitly return a value but instead modifies some properties and variables within its scope."
            },
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore(\n  async (...args: any[]) => Promise.resolve({ /* return remote summary */ }),\n  { /* set integration object */ }\n);\n\ndocumentStore.loadSummary();\n",
              "description": "\nNote that `loadSummary` is called directly without any specific parameters as it is designed to be a part of the class."
            },
            "name": "loadSummary",
            "location": {
              "start": 95,
              "insert": 91,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 90,
                "end": 94
              }
            },
            "item_type": "function",
            "length": 32,
            "docLength": 4
          },
          {
            "id": "31565757-a8d4-918b-2b49-8e1104a73b61",
            "ancestors": [
              "c2cf8602-37f8-e3a9-8044-7ad6893a539d",
              "4fd7d85e-3281-68a5-8344-c181f3798353"
            ],
            "description": "Updates meta object with values from template or summary if available.",
            "name": null,
            "location": {
              "start": 121,
              "insert": 122,
              "offset": " ",
              "indent": 6,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 3,
            "docLength": null
          },
          {
            "id": "8dc0cabf-65f7-10a6-a346-625561de1f63",
            "ancestors": [
              "c2cf8602-37f8-e3a9-8044-7ad6893a539d"
            ],
            "description": "Asynchronously loads summary and chunks for a document store. If no summary exists, it first loads the summary. Then, it looks up chunk indices and loads each chunk individually before setting the `chunks` status to true.",
            "params": [],
            "returns": {
              "type_name": "void",
              "description": "0. It does not explicitly return a value."
            },
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore('namespace', myGetRemote, { version: '1.0' });\ndocumentStore.load();\n",
              "description": "\nThis code creates a new instance of `DocumentStore` with namespace `'namespace'`, gets remote function `myGetRemote`, and initializes metadata object `{ version: '1.0' }`. It then calls the `load()` method on this instance."
            },
            "name": "load",
            "location": {
              "start": 131,
              "insert": 128,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 127,
                "end": 130
              }
            },
            "item_type": "function",
            "length": 12,
            "docLength": 3
          },
          {
            "id": "9a5515c0-0da2-88b8-3b4f-4b794bec4405",
            "ancestors": [
              "c2cf8602-37f8-e3a9-8044-7ad6893a539d"
            ],
            "description": "Updates the metadata of an object by merging additional metadata with the existing metadata. The new metadata replaces any duplicate keys, and the updated metadata is stored in the `meta` property of the `DocumentStore` class.",
            "params": [
              {
                "name": "additionalMeta",
                "default_value": null,
                "optional": false,
                "type_name": "Record<string, any>*",
                "description": "Used to merge with existing metadata. It is expected to be an object literal or a destructured object that contains additional key-value pairs to be added or updated in the metadata."
              }
            ],
            "returns": {
              "type_name": "void",
              "description": "Indicating that it does not return any value or data."
            },
            "usage": {
              "language": "typescript",
              "code": "const docStore = new DocumentStore();\ndocStore.updateMetadata({\n  'new-key': 'new-value',\n  'other-new-key': 'other-new-value'\n});\n",
              "description": ""
            },
            "name": "updateMetadata",
            "location": {
              "start": 151,
              "insert": 151,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "function",
            "length": 6,
            "docLength": null
          },
          {
            "id": "c738d653-298f-9c93-8e43-462830102e72",
            "ancestors": [
              "c2cf8602-37f8-e3a9-8044-7ad6893a539d"
            ],
            "description": "Asynchronously loads a chunk of structured data from a remote storage and concatenates it with the existing content, updating the internal state of the `DocumentStore` instance. If an error occurs during loading, it returns false; otherwise, it returns true indicating successful loading.",
            "params": [
              {
                "name": "chunkIndex",
                "default_value": null,
                "optional": false,
                "type_name": "number*",
                "description": "An index that identifies a specific chunk."
              }
            ],
            "returns": {
              "type_name": "Promise<boolean>*",
              "description": "Resolved to a boolean indicating whether the chunk was loaded successfully (true) or an error occurred (false)."
            },
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore();\n\ndocumentStore.loadChunk(1).then((result) => {\n    if (!result) {\n        // chunk failed to load\n    } else {\n        // chunk loaded successfully\n    }\n});\n",
              "description": "\nThis example demonstrates the basic usage of the `loadChunk` method, which asynchronously loads a specific chunk and returns a promise indicating whether the loading was successful or not."
            },
            "name": "loadChunk",
            "location": {
              "start": 175,
              "insert": 164,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 163,
                "end": 174
              }
            },
            "item_type": "function",
            "length": 16,
            "docLength": 11
          },
          {
            "id": "e180c593-620b-4b97-b945-193e3a3ef7ba",
            "ancestors": [
              "c2cf8602-37f8-e3a9-8044-7ad6893a539d"
            ],
            "description": "Asynchronously retrieves a file from the DocumentStore based on its path, ensuring that the required summary has been loaded and the corresponding chunk is available. If not, it loads the chunk before retrieving the file.",
            "params": [
              {
                "name": "path",
                "default_value": null,
                "optional": false,
                "type_name": "string*",
                "description": "The path to a file that needs to be retrieved from an asynchronous operation, which returns a promise resolving with either a structured file or null if the file could not be found."
              }
            ],
            "returns": {
              "type_name": "Promise<StructuredFile | null>*",
              "description": "Either a `StructuredFile` object or null, indicating whether the requested file exists in the data structure."
            },
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore(\n  async (...args: any[]) => Promise.resolve({}), // implement getRemote method\n  { ... } // implement integration object\n);\n\ntry {\n  const file1 = await documentStore.getFile('path/to/file1');\n  if (!file1) {\n    console.error(\"File not found\");\n  }\n} catch (error) {\n  console.error(error);\n}\n",
              "description": ""
            },
            "name": "getFile",
            "location": {
              "start": 201,
              "insert": 191,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 190,
                "end": 200
              }
            },
            "item_type": "function",
            "length": 23,
            "docLength": 10
          },
          {
            "id": "185cecdd-cc2a-a4b9-7a41-4e0719ec3fd4",
            "ancestors": [
              "c2cf8602-37f8-e3a9-8044-7ad6893a539d"
            ],
            "description": "Adds a path to the end of the last lookup subtable in the `lookup` array if it's not full, otherwise, creates a new subtable with the path. It ensures that each subtable has a maximum size defined by the `CHUNK_SIZE` property.",
            "params": [
              {
                "name": "path",
                "default_value": null,
                "optional": false,
                "type_name": "string*",
                "description": "Passed to the function when it is called, indicating a path that needs to be added to the end of the lookup subtable."
              }
            ],
            "returns": {
              "type_name": "void",
              "description": "0 if the last lookup subtable is full and a new one is created or null otherwise."
            },
            "usage": {
              "language": "typescript",
              "code": "const store = new DocumentStore(getRemote, integration);\nstore.addToEndOfLookup(\"path/to/file.txt\");\n",
              "description": "\nIt adds a path to the last lookup subtable."
            },
            "name": "addToEndOfLookup",
            "location": {
              "start": 247,
              "insert": 241,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 240,
                "end": 246
              }
            },
            "item_type": "function",
            "length": 11,
            "docLength": 6
          },
          {
            "id": "2153794b-f69f-639a-fb49-71df330b3aba",
            "ancestors": [
              "c2cf8602-37f8-e3a9-8044-7ad6893a539d"
            ],
            "description": "Adds a file to the end of an existing chunk or creates a new chunk if the current one is full, based on a predefined CHUNK_SIZE.",
            "params": [
              {
                "name": "file",
                "default_value": null,
                "optional": false,
                "type_name": "StructuredFile*",
                "description": "Expected to be passed when calling this function."
              }
            ],
            "returns": {
              "type_name": "void",
              "description": "Equivalent to no return value. It does not explicitly return a value."
            },
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore();\ndocumentStore.CHUNK_SIZE = 2;\ndocumentStore.addToEndOfChunks({/* structuredFile */});\n",
              "description": ""
            },
            "name": "addToEndOfChunks",
            "location": {
              "start": 268,
              "insert": 258,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 257,
                "end": 267
              }
            },
            "item_type": "function",
            "length": 11,
            "docLength": 10
          },
          {
            "id": "c83f0f80-4619-338e-8e4a-2d18c58185e1",
            "ancestors": [
              "c2cf8602-37f8-e3a9-8044-7ad6893a539d"
            ],
            "description": "Adds a structured file to the document store, checking if the store has been loaded and if the file exists before attempting to add it. If the file already exists, it updates its content; otherwise, it appends the file to the end of the lookup and chunks arrays.",
            "params": [
              {
                "name": "file",
                "default_value": null,
                "optional": false,
                "type_name": "StructuredFile*",
                "description": "Required to be non-null and have a valid path property. If either condition is not met, the function returns false without adding the file."
              }
            ],
            "returns": {
              "type_name": "boolean*",
              "description": "True if the file was successfully added and false otherwise."
            },
            "usage": {
              "language": "typescript",
              "code": "let myDocumentStore = new DocumentStore(myGetRemote);\nmyDocumentStore.load();\n\nlet myFile1 = {\n  path: 'path/to/file1',\n  //... other properties\n};\nlet result = myDocumentStore.addFile(myFile1);\n\nif (result) {\n    // File added successfully\n} else {\n    // Error occurred while adding the file\n}\n",
              "description": ""
            },
            "name": "addFile",
            "location": {
              "start": 289,
              "insert": 279,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 278,
                "end": 288
              }
            },
            "item_type": "function",
            "length": 20,
            "docLength": 10
          },
          {
            "id": "0780dbdd-fc9d-59bb-da43-5aa8edae0efb",
            "ancestors": [
              "c2cf8602-37f8-e3a9-8044-7ad6893a539d"
            ],
            "description": "Updates a file in the document store, handling cases where the file does not exist and ensuring that required chunks are loaded before updating. It returns a boolean indicating success or failure.",
            "params": [
              {
                "name": "file",
                "default_value": null,
                "optional": false,
                "type_name": "StructuredFile*",
                "description": "Required for updating files. It represents a structured file that needs to be added or updated in the storage system."
              }
            ],
            "returns": {
              "type_name": "Promise<boolean>*",
              "description": "A promise that resolves to a boolean indicating whether the file was successfully updated. If an error occurs during the update process, the promise will resolve to false."
            },
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore();\nconst file = { path: 'path/to/file', content: 'file contents' };\n\ndocumentStore.updateFile(file).then((updated) => {\n    if (updated) {\n        // File updated successfully\n    } else {\n        // File update failed\n    }\n});\n",
              "description": ""
            },
            "name": "updateFile",
            "location": {
              "start": 319,
              "insert": 309,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 308,
                "end": 318
              }
            },
            "item_type": "function",
            "length": 27,
            "docLength": 10
          },
          {
            "id": "836bf1f1-7b53-4ca1-1540-d4b67721f6a6",
            "ancestors": [
              "c2cf8602-37f8-e3a9-8044-7ad6893a539d"
            ],
            "description": "Generates a summary object containing two properties, `meta` and `lookup`, which are references to corresponding properties within the `DocumentStore` class. The summary provides an overview of the document store's metadata and lookup data.",
            "params": [],
            "returns": {
              "type_name": "Summary*",
              "description": "An object containing two properties: meta and lookup."
            },
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore(getRemote, integration);\nconst summary = documentStore.outputSummary();\n",
              "description": ""
            },
            "name": "outputSummary",
            "location": {
              "start": 352,
              "insert": 346,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 345,
                "end": 351
              }
            },
            "item_type": "function",
            "length": 6,
            "docLength": 6
          },
          {
            "id": "349f5a77-f842-32b3-064b-cf696fe5b471",
            "ancestors": [
              "c2cf8602-37f8-e3a9-8044-7ad6893a539d"
            ],
            "description": "Breaks down the content into smaller chunks based on a specified size, generates unique keys for each chunk, and stores them in a Record object along with their corresponding contents. The method then returns this Record object.",
            "params": [],
            "returns": {
              "type_name": "Record<string, any>*",
              "description": "A collection of key-value pairs where keys are strings and values can be of any data type, representing chunks of the input content with corresponding paths."
            },
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore(\n  async (...args: any[]) => Promise.resolve({}),\n  {\n    version: '1.0',\n    created_at: new Date(),\n    updated_at: new Date()\n  }\n);\n\nconst outputs = documentStore.outputChunks();\n\n// Outputs will be a Record where keys are string and values are array of bytes\n",
              "description": ""
            },
            "name": "outputChunks",
            "location": {
              "start": 364,
              "insert": 358,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 357,
                "end": 363
              }
            },
            "item_type": "function",
            "length": 9,
            "docLength": 6
          }
        ]
      }
    }
  },
  {
    "name": "index.test.ts",
    "path": "tests/index.test.ts",
    "content": {
      "structured": {
        "description": "A `DocumentStore` class that manages a collection of files and their metadata. The class provides methods for loading, adding, updating, and retrieving files from the store. It also includes tests for various use cases, such as creating an empty store, setting the summary file path, loading a summary file, and adding or updating files in the store. The code uses the `StructuredFile` type and the `mockSummary` function to generate mock summaries of files.",
        "items": [
          {
            "id": "54784b16-dc93-1eaa-c648-e6a9113abc03",
            "ancestors": [],
            "description": "Resolves a promise containing metadata and lookup information for a mock API endpoint. The metadata includes creation and update timestamps, while the lookup array contains paths to two files in the `src/` directory: `index.js`, `database.js`, and `component/index.js`.",
            "params": [],
            "returns": {
              "type_name": "Object",
              "description": "A meta object containing creation and update timestamps and a list of pipelines, as well as a lookup array with paths to two files and one directory in the src directory."
            },
            "usage": {
              "language": "typescript",
              "code": "const mockSummary = () => {\n    return Promise.resolve({\n      meta: {\n        created_at: \"2024-04-08T13:50:02.790Z\",\n        updated_at: \"2024-04-08T13:50:02.790Z\",\n        pipelines: [\"cd1d3bab-03db-494c-9e03-16ee456964fb\"],\n      },\n      lookup: [[\"src/index.js\", \"src/database.js\"], [\"src/component/index.js\"]],\n    });\n  };\n",
              "description": ""
            },
            "name": "mockSummary",
            "location": {
              "start": 6,
              "insert": 6,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 9,
            "docLength": null
          },
          {
            "id": "d2c09581-f2ac-5d81-1943-78c80aecfaf5",
            "ancestors": [],
            "description": "Takes a chunk path as input and returns a resolved promise of either the mock summary or a file from the chunks array depending on the chunk path provided.",
            "params": [
              {
                "name": "chunkPath",
                "default_value": null,
                "optional": false,
                "type_name": "string",
                "description": "Used to determine which mock file to return based on its path relative to the namespace prefix."
              }
            ],
            "returns": {
              "type_name": "Promise",
              "description": "Resolved with either a mock summary or one of the chunks."
            },
            "usage": {
              "language": "typescript",
              "code": "const chunkPath = `.${NAMESPACE}/00001.json`;\ngetFileMock(chunkPath).then((data) => {\n  // data will contain the contents of the file located at chunkPath\n});\n",
              "description": ""
            },
            "name": "getFileMock",
            "location": {
              "start": 16,
              "insert": 16,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 12,
            "docLength": null
          },
          {
            "id": "42ef8453-2d77-95a8-554a-205aaf438ac1",
            "ancestors": [],
            "description": "Returns an array of objects, each representing a file or directory within a project. The objects contain information about the file's name, path, and content, including a description.",
            "params": [],
            "returns": {
              "type_name": "Object",
              "description": "An array of objects representing files and their contents. Each object in the array has three properties: name, path, and content, where content is a JSON object containing a string value representing the file's contents."
            },
            "usage": {
              "language": "typescript",
              "code": "const chunks = () => ({\n  \"00000\": [\n    {\n      name: \"mock-1\",\n      path: \"src/index.js\",\n      content: {\n        description: \"duck\",\n      },\n    },\n    {\n      name: \"mock-2\",\n      path: \"src/database.js\",\n      content: {\n        description: \"duckDB\",\n      },\n    },\n  ],\n  \"00001\": [\n    {\n      name: \"mock-3\",\n      path: \"src/component/index.js\",\n      content: {\n        description: \"Component Duck\",\n      },\n    },\n  ],\n});\n",
              "description": ""
            },
            "name": "chunks",
            "location": {
              "start": 29,
              "insert": 29,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 27,
            "docLength": null
          },
          {
            "id": "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae",
            "ancestors": [],
            "description": "Tests various features of a DocumentStore.",
            "name": null,
            "location": {
              "start": 72,
              "insert": 73,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 127,
            "docLength": null
          },
          {
            "id": "e39cefa6-6f3c-11b0-a543-efb3ad18b4be",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "Creates an instance of `DocumentStore` and calls its `outputSummary()` method, which returns a summary of the document store's contents.",
            "name": null,
            "location": {
              "start": 73,
              "insert": 74,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 7,
            "docLength": null
          },
          {
            "id": "5d73bcf9-32c3-e396-aa42-d33f685393c0",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "Creates a new instance of `DocumentStore`, passing the namespace as an argument, and resolves a promise to obtain the chunk summary path based on the namespace.",
            "name": null,
            "location": {
              "start": 80,
              "insert": 81,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 7,
            "docLength": null
          },
          {
            "id": "5189ae6a-225a-cc8e-c848-8ee549f24403",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "Loads a summary file and returns a summary object containing two items in its `lookup` property.",
            "name": null,
            "location": {
              "start": 87,
              "insert": 88,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 9,
            "docLength": null
          },
          {
            "id": "eb9de803-c44e-7086-3645-bb43e4ad1879",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "1) creates a new instance of `DocumentStore`, 2) sets its chunk size to 2, and 3) loads all chunks using the `load()` method, after which it verifies that both the summary and output chunks contain two elements each.",
            "name": null,
            "location": {
              "start": 96,
              "insert": 97,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 17,
            "docLength": null
          },
          {
            "id": "34a3eb46-440e-0b81-494c-98661494aa51",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "1) creates a new instance of `DocumentStore`, 2) sets the chunk size to 2, and 3) retrieves the file at the specified path (\"src/database.js\") using the `getFile()` method.",
            "name": null,
            "location": {
              "start": 113,
              "insert": 114,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 12,
            "docLength": null
          },
          {
            "id": "dbc7e254-f2d7-9fb6-074a-20cd2a79b475",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "* Creates a new instance of `DocumentStore` with a mock `getFile` method.\n* Calls the `getFile` method on the `DocumentStore` instance with the file path \"src/index.js\".\n* Expects an error to be thrown due to the absence of the `load` method call before accessing the file.",
            "name": null,
            "location": {
              "start": 125,
              "insert": 126,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 9,
            "docLength": null
          },
          {
            "id": "a7776b74-8dea-0d9e-d04a-c5b55b6c07d9",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "Adds a new file to a store and retrieves it back for verification.",
            "name": null,
            "location": {
              "start": 134,
              "insert": 135,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 14,
            "docLength": null
          },
          {
            "id": "7a4f7b46-c275-bc9c-0443-1eba61261138",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "1) creates a new `DocumentStore` instance, 2) sets its `CHUNK_SIZE` to a specific value, and 3) updates an existing file using the `updateFile()` method, followed by retrieving the file using the `getFile()` method and verifying its path.",
            "name": null,
            "location": {
              "start": 148,
              "insert": 149,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 14,
            "docLength": null
          },
          {
            "id": "b7d35d2d-cc97-1da7-314c-29d5ed647f1f",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "1) creates a new instance of `DocumentStore`, 2) sets properties on that instance, and 3) updates an existing file in the store by providing the same path but different content description.",
            "name": null,
            "location": {
              "start": 162,
              "insert": 163,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 18,
            "docLength": null
          },
          {
            "id": "6b9dcf34-3a0d-5681-4948-1f6642e76ff8",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "Updates an existing file in a document store by adding new content and verifying if the updated file's description matches the expected value.",
            "name": null,
            "location": {
              "start": 180,
              "insert": 181,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 18,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "IDocumentStore.d.ts",
    "path": "types/IDocumentStore.d.ts",
    "content": {
      "structured": {
        "description": "An interface for a document store that includes several properties and methods: `CHUNK_SIZE`, `namespace`, `meta`, `lookup`, and `status`. The `CHUNK_SIZE` property sets the size of chunks used for storing documents, while the `namespace` property specifies the namespace for the document store. The `meta` property provides metadata for the document store, and the `lookup` property is an array of strings representing the paths to chunks containing documents. The `status` property contains two properties: `summary`, which indicates whether the document store has a summary available, and `chunks`, which indicates whether the document store has any chunks available.",
        "items": [
          {
            "id": "780ab884-af40-379b-1348-8337e3c66a94",
            "ancestors": [],
            "description": "Defines a set of properties and methods for storing and managing documents. It includes the document chunk size, namespace, metadata, and a lookup array. Additionally, it provides a status object with summary and chunks properties.",
            "name": "IDocumentStore",
            "location": {
              "start": 3,
              "insert": 3,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 10,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Meta.d.ts",
    "path": "types/Meta.d.ts",
    "content": {
      "structured": {
        "description": "An interface called `Meta` that represents a metadata object. The interface has four properties: `version`, `created_at`, `updated_at`, and an optional property with any type of value. The `version` property is a string representing the version number, the `created_at` and `updated_at` properties are Date objects representing the creation and last update time of the metadata object.",
        "items": [
          {
            "id": "ab4e3495-19b9-a8a0-7c4f-a600389893b7",
            "ancestors": [],
            "description": "Defines a set of properties that consist of a version, creation and update dates, and arbitrary data stored under key strings.",
            "name": "Meta",
            "location": {
              "start": 1,
              "insert": 1,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 6,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "StructuredFile.d.ts",
    "path": "types/StructuredFile.d.ts",
    "content": {
      "structured": {
        "description": "An interface named StructuredFile that consists of three properties: name, path, and content. The interface represents a file with structured data, allowing for easy manipulation and storage. The content property can hold any type of data, and the other two properties provide information about the file's identity and location.",
        "items": [
          {
            "id": "2801a404-7bff-0c82-9643-0b8059ca5fcc",
            "ancestors": [],
            "description": "Defines a set of properties for a file, including its name, path, and contents.",
            "name": "StructuredFile",
            "location": {
              "start": 1,
              "insert": 1,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 5,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Summary.d.ts",
    "path": "types/Summary.d.ts",
    "content": {
      "structured": {
        "description": "An interface Summary, which consists of three properties: meta, lookup, and chunks. The meta property is of type Meta, while the lookup property is an array of strings, representing a two-dimensional matrix. The chunks property is optional and represents a list of strings, likely used for chunking the input data.",
        "items": [
          {
            "id": "026a21ea-5807-858f-2b43-e6bd784ef8dc",
            "ancestors": [],
            "description": "Defines a set of properties: `meta`, `lookup`, and `chunks`. The `meta` property is an object with additional information about the summary, while the `lookup` property is an array of arrays representing the lookup tables for each chunk. The `chunks` property can optionally be defined as an array of strings, representing the chunks of data in the summary.",
            "name": "Summary",
            "location": {
              "start": 3,
              "insert": 3,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 5,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "jest.config.js",
    "path": "jest.config.js",
    "content": {
      "structured": {
        "description": "configuration options for Jest, a popular JavaScript testing framework. The `preset` option sets the Jest preset to use, in this case \"ts-jest\". The `testEnvironment` option specifies that Jest should run tests in a Node environment. Finally, the `testMatch` option specifies which files should be searched for test files, using glob syntax to match files with extensions \".test.ts\".",
        "items": []
      }
    }
  }
]