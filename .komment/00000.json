[
  {
    "name": "index.ts",
    "path": "src/index.ts",
    "content": {
      "structured": {
        "description": "A DocumentStore class that manages adding, retrieving, and updating files in a designated folder. It accepts a constructor parameter representing a third-party library or service that generates high-quality documentation, along with additional metadata that can be used to customize the document store's behavior. The class provides methods for loading and updating the document summary, as well as adding and updating individual files. It also includes properties for storing chunk data, content, and other meta information.",
        "items": [
          {
            "id": "2e83609e-de98-86a8-b648-0ce786451e62",
            "ancestors": [],
            "description": "Provides an implementation for storing and retrieving code documentation in a structured manner, allowing for efficient access and manipulation of files and chunks within a specified namespace.",
            "interfaces": [
              "IDocumentStore"
            ],
            "superclass": null,
            "is_abstract": false,
            "fields": [
              {
                "name": "CHUNK_SIZE",
                "type_name": "number",
                "description": "Used to specify the size of a chunk in bytes for storing code documentation."
              },
              {
                "name": "namespace",
                "type_name": "string",
                "description": "Used to specify the namespace for the document store, which determines how the documents are organized and accessed."
              },
              {
                "name": "meta",
                "type_name": {
                  "full": "{\n    version: string;\n    created_at: Date;\n    updated_at: Date;\n    [key: string]: any;\n  }",
                  "pattern": "object",
                  "sub": [
                    {
                      "name": "version",
                      "type_name": "string",
                      "value": null,
                      "visibility": null,
                      "is_static": false,
                      "is_optional": false,
                      "is_readonly": false
                    },
                    {
                      "name": "created_at",
                      "type_name": "Date",
                      "value": null,
                      "visibility": null,
                      "is_static": false,
                      "is_optional": false,
                      "is_readonly": false
                    },
                    {
                      "name": "updated_at",
                      "type_name": "Date",
                      "value": null,
                      "visibility": null,
                      "is_static": false,
                      "is_optional": false,
                      "is_readonly": false
                    }
                  ]
                },
                "description": "Used to store metadata about the document, such as version, creation date, and update date."
              },
              {
                "name": "metaTemplate",
                "type_name": {
                  "pattern": "generic",
                  "full": "Record<string, any>",
                  "name": "Record",
                  "by": [
                    "string",
                    "any"
                  ]
                },
                "description": "Used to specify a template for customizing the structure of the metadata."
              },
              {
                "name": "lookup",
                "type_name": "string[][]",
                "description": "Used to store a list of sub-arrays containing file paths that correspond to the chunks stored in the document store. It plays a crucial role in storing and retrieving files from the document store."
              },
              {
                "name": "chunks",
                "type_name": "StructuredFile[][]",
                "description": "Used to store chunks of code content. It is used to store the content of the document in a structured way, making it easier to access and manipulate the content."
              },
              {
                "name": "content",
                "type_name": "StructuredFile[]",
                "description": "Used to store the actual content of the documents, which can be accessed through the `addFile()` method"
              },
              {
                "name": "status",
                "type_name": {
                  "full": "{\n    summary: boolean;\n    chunks: boolean;\n  }",
                  "pattern": "object",
                  "sub": [
                    {
                      "name": "summary",
                      "type_name": "boolean",
                      "value": null,
                      "visibility": null,
                      "is_static": false,
                      "is_optional": false,
                      "is_readonly": false
                    },
                    {
                      "name": "chunks",
                      "type_name": "boolean",
                      "value": null,
                      "visibility": null,
                      "is_static": false,
                      "is_optional": false,
                      "is_readonly": false
                    }
                  ]
                },
                "description": "Used to store information about the status of the documentation, such as whether it has been summarized or if chunks have been loaded."
              }
            ],
            "name": "DocumentStore",
            "location": {
              "start": 22,
              "insert": 22,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 352,
            "docLength": null
          },
          {
            "id": "2abae119-7d54-da8b-924a-deafb4bff4be",
            "ancestors": [
              "2e83609e-de98-86a8-b648-0ce786451e62"
            ],
            "description": "Sets up instance variables for namespace, getRemote method, chunk size, metadata, and other properties, ensuring they are not null or undefined before initialization.",
            "params": [
              {
                "name": "namespace",
                "type_name": "string",
                "optional": false,
                "description": "Required. Its purpose is to provide a unique name or identifier for the remote document.",
                "default_value": null
              },
              {
                "name": "getRemote",
                "type_name": "(...args: any[]) => Promise<Record<any, any>>",
                "optional": false,
                "description": "Required to retrieve data from an external source.",
                "default_value": null
              },
              {
                "name": "additionalMeta",
                "type_name": "Record<string, any>",
                "optional": true,
                "description": "Used to store custom metadata for the document.",
                "default_value": "{}"
              }
            ],
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore(namespace, getRemote);\ndocumentStore.setUpdatedAt(new Date());\ndocumentStore.loadSummary();\n",
              "description": ""
            },
            "name": null,
            "location": {
              "start": 53,
              "insert": 41,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 40,
                "end": 52
              }
            },
            "item_type": "constructor",
            "length": 26,
            "docLength": 12
          },
          {
            "id": "c7ef7154-ca8b-81b2-b041-b7b59ce1202d",
            "ancestors": [
              "2e83609e-de98-86a8-b648-0ce786451e62"
            ],
            "description": "Updates the `updated_at` metadata field of an instance by assigning the provided `Date` object to it.",
            "params": [
              {
                "name": "updated_at",
                "default_value": null,
                "optional": false,
                "type_name": "Date",
                "description": "Used to update the `updated_at` metadata field for the current object."
              }
            ],
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore();\ndocumentStore.setUpdatedAt(new Date());\n",
              "description": "\nIn this example, `DocumentStore` is a class that contains methods and properties for storing and managing document data, such as `getRemote`, `metaTemplate`, `lookup`, `chunks`, `content`, `status`. The method `setUpdatedAt()` takes an argument of type `Date` representing the updated date.\nThis example shows how to use the `setUpdatedAt()` method by creating a new instance of `DocumentStore` and calling its `setUpdatedAt()` method with a `new Date()` object as an argument."
            },
            "name": "setUpdatedAt",
            "location": {
              "start": 87,
              "insert": 80,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 79,
                "end": 86
              }
            },
            "item_type": "function",
            "length": 3,
            "docLength": 7
          },
          {
            "id": "6c7e133c-5867-73b7-a242-c73d2b0dcdee",
            "ancestors": [
              "2e83609e-de98-86a8-b648-0ce786451e62"
            ],
            "description": "Retrieves and updates the document summary information, including meta data and chunk information, and assigns it to the instance's `summary` property.",
            "params": [],
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore(getRemote, integration);\nawait documentStore.loadSummary(); // Load summary data from remote storage.\n",
              "description": ""
            },
            "name": "loadSummary",
            "location": {
              "start": 95,
              "insert": 91,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 90,
                "end": 94
              }
            },
            "item_type": "function",
            "length": 32,
            "docLength": 4
          },
          {
            "id": "c9af65eb-8713-519b-8c4c-dea95ebf6a32",
            "ancestors": [
              "2e83609e-de98-86a8-b648-0ce786451e62",
              "6c7e133c-5867-73b7-a242-c73d2b0dcdee"
            ],
            "description": "Updates the `this.meta` object with values from the `summary.meta` object or the original `value`, if the `summary` object doesn't have an entry for the key.",
            "name": null,
            "location": {
              "start": 121,
              "insert": 122,
              "offset": " ",
              "indent": 6,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 3,
            "docLength": null
          },
          {
            "id": "47e08d28-a541-8384-e646-7aa86ec96616",
            "ancestors": [
              "2e83609e-de98-86a8-b648-0ce786451e62"
            ],
            "description": "Async loads chunks of data from a summary and sets the `chunks` status to true once loaded.",
            "params": [],
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore(getRemote, integration);\nawait documentStore.load();\n",
              "description": ""
            },
            "name": "load",
            "location": {
              "start": 131,
              "insert": 128,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 127,
                "end": 130
              }
            },
            "item_type": "function",
            "length": 12,
            "docLength": 3
          },
          {
            "id": "fc7f219c-8fc3-2392-064e-c6ee991bb5e6",
            "ancestors": [
              "2e83609e-de98-86a8-b648-0ce786451e62"
            ],
            "description": "Updates the metadata of an object by combining its current metadata with additional metadata provided as an argument, storing the resulting metadata in the `meta` property of the class instance.",
            "params": [
              {
                "name": "additionalMeta",
                "default_value": null,
                "optional": false,
                "type_name": "Record<string, any>",
                "description": "Used to add additional metadata to the existing metadata object."
              }
            ],
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore(getRemote, integration);\n  documentStore.updateMetadata({\n    version: '1.0',\n    created_at: Date.now(),\n    updated_at: Date.now()\n  });\n",
              "description": "\nIn this example, `updateMetadata` is called on an instance of the `DocumentStore` class to update its metadata. The method takes a record of key-value pairs as an argument, where the keys are the names of the properties that should be updated, and the values are the new values for those properties. In this case, the version, created_at, and updated_at properties are all updated to the current date and time."
            },
            "name": "updateMetadata",
            "location": {
              "start": 151,
              "insert": 151,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "function",
            "length": 6,
            "docLength": null
          },
          {
            "id": "548d36ea-41b4-928f-e64f-9664b34b946c",
            "ancestors": [
              "2e83609e-de98-86a8-b648-0ce786451e62"
            ],
            "description": "Ynchronously retrieves and appends a chunk of data to the store's content, marking it as loaded upon success.",
            "params": [
              {
                "name": "chunkIndex",
                "default_value": null,
                "optional": false,
                "type_name": "number",
                "description": "Used to represent the index of a chunk that needs to be loaded from the remote server."
              }
            ],
            "returns": {
              "type_name": "Promise<boolean>",
              "description": "Resolved when the chunk is loaded successfully, and rejected otherwise."
            },
            "usage": {
              "language": "typescript",
              "code": "const store = new DocumentStore(getRemote, integration);\nawait store.loadChunk(123); // Load chunk number 123\n",
              "description": ""
            },
            "name": "loadChunk",
            "location": {
              "start": 175,
              "insert": 164,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 163,
                "end": 174
              }
            },
            "item_type": "function",
            "length": 16,
            "docLength": 11
          },
          {
            "id": "ae75e735-383d-4691-4649-fef8aab3d752",
            "ancestors": [
              "2e83609e-de98-86a8-b648-0ce786451e62"
            ],
            "description": "Retrieves a file from the store based on its path, loading the necessary chunks and checking for correctness of the chunk and lookup.",
            "params": [
              {
                "name": "path",
                "default_value": null,
                "optional": false,
                "type_name": "string",
                "description": "Used to identify a file within a chunk."
              }
            ],
            "returns": {
              "type_name": "Promise<StructuredFile | null>",
              "description": "A promise that resolves to either a StructuredFile object or null."
            },
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore(getRemote, integration);\ndocumentStore.loadSummary().then(() => {\n  const file = documentStore.getFile('path/to/file');\n});\n",
              "description": ""
            },
            "name": "getFile",
            "location": {
              "start": 201,
              "insert": 191,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 190,
                "end": 200
              }
            },
            "item_type": "function",
            "length": 23,
            "docLength": 10
          },
          {
            "id": "96541505-95ab-74a4-204a-decc433f0321",
            "ancestors": [
              "2e83609e-de98-86a8-b648-0ce786451e62"
            ],
            "description": "Updates the lookup subtable by adding a new entry or appending to the existing one based on the current table size and length.",
            "params": [
              {
                "name": "path",
                "default_value": null,
                "optional": false,
                "type_name": "string",
                "description": "Used to specify the path to be added to the end of the lookup subtable."
              }
            ],
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore(getRemote, integration);\ndocumentStore.addToEndOfLookup(\"path\");\n",
              "description": ""
            },
            "name": "addToEndOfLookup",
            "location": {
              "start": 247,
              "insert": 241,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 240,
                "end": 246
              }
            },
            "item_type": "function",
            "length": 11,
            "docLength": 6
          },
          {
            "id": "f4449ff0-cf9a-54b4-e34c-43459f8a31a1",
            "ancestors": [
              "2e83609e-de98-86a8-b648-0ce786451e62"
            ],
            "description": "Adds files to the end of existing chunks or creates new ones if necessary, maintaining a maximum size for each chunk.",
            "params": [
              {
                "name": "file",
                "default_value": null,
                "optional": false,
                "type_name": "StructuredFile",
                "description": "Used to represent a file that needs to be added to the chunks array."
              }
            ],
            "usage": {
              "language": "typescript",
              "code": "let documentStore = new DocumentStore(getRemote, integration);\ndocumentStore.addToEndOfChunks(file);\n",
              "description": ""
            },
            "name": "addToEndOfChunks",
            "location": {
              "start": 268,
              "insert": 258,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 257,
                "end": 267
              }
            },
            "item_type": "function",
            "length": 11,
            "docLength": 10
          },
          {
            "id": "da01e283-02c0-4494-3946-0c9af773f930",
            "ancestors": [
              "2e83609e-de98-86a8-b648-0ce786451e62"
            ],
            "description": "Allows adding a file to the document store if certain conditions are met, including the file existing at the specified path and the `load` method being called before adding files.",
            "params": [
              {
                "name": "file",
                "default_value": null,
                "optional": false,
                "type_name": "StructuredFile",
                "description": "Used to represent a file that can be added to the content of the object."
              }
            ],
            "returns": {
              "type_name": "boolean",
              "description": "True when a file is successfully added to the structured file and False otherwise."
            },
            "usage": {
              "language": "typescript",
              "code": "const docStore = new DocumentStore();\ndocStore.addFile(file);\nconst file = new StructuredFile(\"path/to/file\");\n",
              "description": ""
            },
            "name": "addFile",
            "location": {
              "start": 289,
              "insert": 279,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 278,
                "end": 288
              }
            },
            "item_type": "function",
            "length": 20,
            "docLength": 10
          },
          {
            "id": "f412d059-3f17-c0ab-0143-28a81a497832",
            "ancestors": [
              "2e83609e-de98-86a8-b648-0ce786451e62"
            ],
            "description": "Updates a file in the store by checking if it exists, loading any necessary chunks, and updating the file's position in the chunk.",
            "params": [
              {
                "name": "file",
                "default_value": null,
                "optional": false,
                "type_name": "StructuredFile",
                "description": "Used to represent a file being updated, passed by reference from the caller."
              }
            ],
            "returns": {
              "type_name": "Promise<boolean>",
              "description": "True if the file was updated successfully and false otherwise."
            },
            "usage": {
              "language": "typescript",
              "code": "const docStore = new DocumentStore(getRemote);\ndocStore.updateFile(file);\n",
              "description": ""
            },
            "name": "updateFile",
            "location": {
              "start": 319,
              "insert": 309,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 308,
                "end": 318
              }
            },
            "item_type": "function",
            "length": 27,
            "docLength": 10
          },
          {
            "id": "f9b3c736-9436-4396-3348-c8c484c717b8",
            "ancestors": [
              "2e83609e-de98-86a8-b648-0ce786451e62"
            ],
            "description": "Summarizes the class's internal state by returning an object containing `meta` and `lookup` properties.",
            "params": [],
            "returns": {
              "type_name": "Summary",
              "description": "An object containing two properties: `meta` and `lookup`."
            },
            "usage": {
              "language": "typescript",
              "code": "const docStore = new DocumentStore({ getRemote, integration }); // Set up an instance of a DocumentStore class with various parameters\ndocStore.outputSummary(); // Call the outputSummary() method to generate high-quality documentation.\n",
              "description": ""
            },
            "name": "outputSummary",
            "location": {
              "start": 352,
              "insert": 346,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 345,
                "end": 351
              }
            },
            "item_type": "function",
            "length": 6,
            "docLength": 6
          },
          {
            "id": "3d6194af-76de-1cb3-a940-c2b0ac67bcdd",
            "ancestors": [
              "2e83609e-de98-86a8-b648-0ce786451e62"
            ],
            "description": "Creates a new Record object containing chunks of the original content, each chunk represented by a key-value pair where the key is the path to the chunk and the value is the chunk of content.",
            "params": [],
            "returns": {
              "type_name": "Record<string, any>",
              "description": "A mapping of string chunk keys to their corresponding chunks of text."
            },
            "usage": {
              "language": "typescript",
              "code": "const documentStore = new DocumentStore({ getRemote });\nconst outputChunks = documentStore.outputChunks();\n",
              "description": ""
            },
            "name": "outputChunks",
            "location": {
              "start": 364,
              "insert": 358,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 357,
                "end": 363
              }
            },
            "item_type": "function",
            "length": 9,
            "docLength": 6
          }
        ]
      }
    }
  },
  {
    "name": "index.test.ts",
    "path": "tests/index.test.ts",
    "content": {
      "structured": {
        "description": "A `DocumentStore` class that manages a collection of files and their metadata. The class provides methods for loading, adding, updating, and retrieving files from the store. It also includes tests for various use cases, such as creating an empty store, setting the summary file path, loading a summary file, and adding or updating files in the store. The code uses the `StructuredFile` type and the `mockSummary` function to generate mock summaries of files.",
        "items": [
          {
            "id": "54784b16-dc93-1eaa-c648-e6a9113abc03",
            "ancestors": [],
            "description": "Resolves a promise containing metadata and lookup information for a mock API endpoint. The metadata includes creation and update timestamps, while the lookup array contains paths to two files in the `src/` directory: `index.js`, `database.js`, and `component/index.js`.",
            "params": [],
            "returns": {
              "type_name": "Object",
              "description": "A meta object containing creation and update timestamps and a list of pipelines, as well as a lookup array with paths to two files and one directory in the src directory."
            },
            "usage": {
              "language": "typescript",
              "code": "const mockSummary = () => {\n    return Promise.resolve({\n      meta: {\n        created_at: \"2024-04-08T13:50:02.790Z\",\n        updated_at: \"2024-04-08T13:50:02.790Z\",\n        pipelines: [\"cd1d3bab-03db-494c-9e03-16ee456964fb\"],\n      },\n      lookup: [[\"src/index.js\", \"src/database.js\"], [\"src/component/index.js\"]],\n    });\n  };\n",
              "description": ""
            },
            "name": "mockSummary",
            "location": {
              "start": 6,
              "insert": 6,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 9,
            "docLength": null
          },
          {
            "id": "d2c09581-f2ac-5d81-1943-78c80aecfaf5",
            "ancestors": [],
            "description": "Takes a chunk path as input and returns a resolved promise of either the mock summary or a file from the chunks array depending on the chunk path provided.",
            "params": [
              {
                "name": "chunkPath",
                "default_value": null,
                "optional": false,
                "type_name": "string",
                "description": "Used to determine which mock file to return based on its path relative to the namespace prefix."
              }
            ],
            "returns": {
              "type_name": "Promise",
              "description": "Resolved with either a mock summary or one of the chunks."
            },
            "usage": {
              "language": "typescript",
              "code": "const chunkPath = `.${NAMESPACE}/00001.json`;\ngetFileMock(chunkPath).then((data) => {\n  // data will contain the contents of the file located at chunkPath\n});\n",
              "description": ""
            },
            "name": "getFileMock",
            "location": {
              "start": 16,
              "insert": 16,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 12,
            "docLength": null
          },
          {
            "id": "42ef8453-2d77-95a8-554a-205aaf438ac1",
            "ancestors": [],
            "description": "Returns an array of objects, each representing a file or directory within a project. The objects contain information about the file's name, path, and content, including a description.",
            "params": [],
            "returns": {
              "type_name": "Object",
              "description": "An array of objects representing files and their contents. Each object in the array has three properties: name, path, and content, where content is a JSON object containing a string value representing the file's contents."
            },
            "usage": {
              "language": "typescript",
              "code": "const chunks = () => ({\n  \"00000\": [\n    {\n      name: \"mock-1\",\n      path: \"src/index.js\",\n      content: {\n        description: \"duck\",\n      },\n    },\n    {\n      name: \"mock-2\",\n      path: \"src/database.js\",\n      content: {\n        description: \"duckDB\",\n      },\n    },\n  ],\n  \"00001\": [\n    {\n      name: \"mock-3\",\n      path: \"src/component/index.js\",\n      content: {\n        description: \"Component Duck\",\n      },\n    },\n  ],\n});\n",
              "description": ""
            },
            "name": "chunks",
            "location": {
              "start": 29,
              "insert": 29,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 27,
            "docLength": null
          },
          {
            "id": "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae",
            "ancestors": [],
            "description": "Tests various features of a DocumentStore.",
            "name": null,
            "location": {
              "start": 72,
              "insert": 73,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 127,
            "docLength": null
          },
          {
            "id": "e39cefa6-6f3c-11b0-a543-efb3ad18b4be",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "Creates an instance of `DocumentStore` and calls its `outputSummary()` method, which returns a summary of the document store's contents.",
            "name": null,
            "location": {
              "start": 73,
              "insert": 74,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 7,
            "docLength": null
          },
          {
            "id": "5d73bcf9-32c3-e396-aa42-d33f685393c0",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "Creates a new instance of `DocumentStore`, passing the namespace as an argument, and resolves a promise to obtain the chunk summary path based on the namespace.",
            "name": null,
            "location": {
              "start": 80,
              "insert": 81,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 7,
            "docLength": null
          },
          {
            "id": "5189ae6a-225a-cc8e-c848-8ee549f24403",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "Loads a summary file and returns a summary object containing two items in its `lookup` property.",
            "name": null,
            "location": {
              "start": 87,
              "insert": 88,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 9,
            "docLength": null
          },
          {
            "id": "eb9de803-c44e-7086-3645-bb43e4ad1879",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "1) creates a new instance of `DocumentStore`, 2) sets its chunk size to 2, and 3) loads all chunks using the `load()` method, after which it verifies that both the summary and output chunks contain two elements each.",
            "name": null,
            "location": {
              "start": 96,
              "insert": 97,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 17,
            "docLength": null
          },
          {
            "id": "34a3eb46-440e-0b81-494c-98661494aa51",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "1) creates a new instance of `DocumentStore`, 2) sets the chunk size to 2, and 3) retrieves the file at the specified path (\"src/database.js\") using the `getFile()` method.",
            "name": null,
            "location": {
              "start": 113,
              "insert": 114,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 12,
            "docLength": null
          },
          {
            "id": "dbc7e254-f2d7-9fb6-074a-20cd2a79b475",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "* Creates a new instance of `DocumentStore` with a mock `getFile` method.\n* Calls the `getFile` method on the `DocumentStore` instance with the file path \"src/index.js\".\n* Expects an error to be thrown due to the absence of the `load` method call before accessing the file.",
            "name": null,
            "location": {
              "start": 125,
              "insert": 126,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 9,
            "docLength": null
          },
          {
            "id": "a7776b74-8dea-0d9e-d04a-c5b55b6c07d9",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "Adds a new file to a store and retrieves it back for verification.",
            "name": null,
            "location": {
              "start": 134,
              "insert": 135,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 14,
            "docLength": null
          },
          {
            "id": "7a4f7b46-c275-bc9c-0443-1eba61261138",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "1) creates a new `DocumentStore` instance, 2) sets its `CHUNK_SIZE` to a specific value, and 3) updates an existing file using the `updateFile()` method, followed by retrieving the file using the `getFile()` method and verifying its path.",
            "name": null,
            "location": {
              "start": 148,
              "insert": 149,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 14,
            "docLength": null
          },
          {
            "id": "b7d35d2d-cc97-1da7-314c-29d5ed647f1f",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "1) creates a new instance of `DocumentStore`, 2) sets properties on that instance, and 3) updates an existing file in the store by providing the same path but different content description.",
            "name": null,
            "location": {
              "start": 162,
              "insert": 163,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 18,
            "docLength": null
          },
          {
            "id": "6b9dcf34-3a0d-5681-4948-1f6642e76ff8",
            "ancestors": [
              "16a9564b-c1ba-8f9a-ae4b-ecfee46661ae"
            ],
            "description": "Updates an existing file in a document store by adding new content and verifying if the updated file's description matches the expected value.",
            "name": null,
            "location": {
              "start": 180,
              "insert": 181,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 18,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "IDocumentStore.d.ts",
    "path": "types/IDocumentStore.d.ts",
    "content": {
      "structured": {
        "description": "An interface for a document store that includes several properties and methods: `CHUNK_SIZE`, `namespace`, `meta`, `lookup`, and `status`. The `CHUNK_SIZE` property sets the size of chunks used for storing documents, while the `namespace` property specifies the namespace for the document store. The `meta` property provides metadata for the document store, and the `lookup` property is an array of strings representing the paths to chunks containing documents. The `status` property contains two properties: `summary`, which indicates whether the document store has a summary available, and `chunks`, which indicates whether the document store has any chunks available.",
        "items": [
          {
            "id": "780ab884-af40-379b-1348-8337e3c66a94",
            "ancestors": [],
            "description": "Defines a set of properties and methods for storing and managing documents. It includes the document chunk size, namespace, metadata, and a lookup array. Additionally, it provides a status object with summary and chunks properties.",
            "name": "IDocumentStore",
            "location": {
              "start": 3,
              "insert": 3,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 10,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Meta.d.ts",
    "path": "types/Meta.d.ts",
    "content": {
      "structured": {
        "description": "An interface called `Meta` that represents a metadata object. The interface has four properties: `version`, `created_at`, `updated_at`, and an optional property with any type of value. The `version` property is a string representing the version number, the `created_at` and `updated_at` properties are Date objects representing the creation and last update time of the metadata object.",
        "items": [
          {
            "id": "ab4e3495-19b9-a8a0-7c4f-a600389893b7",
            "ancestors": [],
            "description": "Defines a set of properties that consist of a version, creation and update dates, and arbitrary data stored under key strings.",
            "name": "Meta",
            "location": {
              "start": 1,
              "insert": 1,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 6,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "StructuredFile.d.ts",
    "path": "types/StructuredFile.d.ts",
    "content": {
      "structured": {
        "description": "An interface named StructuredFile that consists of three properties: name, path, and content. The interface represents a file with structured data, allowing for easy manipulation and storage. The content property can hold any type of data, and the other two properties provide information about the file's identity and location.",
        "items": [
          {
            "id": "2801a404-7bff-0c82-9643-0b8059ca5fcc",
            "ancestors": [],
            "description": "Defines a set of properties for a file, including its name, path, and contents.",
            "name": "StructuredFile",
            "location": {
              "start": 1,
              "insert": 1,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 5,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Summary.d.ts",
    "path": "types/Summary.d.ts",
    "content": {
      "structured": {
        "description": "An interface Summary, which consists of three properties: meta, lookup, and chunks. The meta property is of type Meta, while the lookup property is an array of strings, representing a two-dimensional matrix. The chunks property is optional and represents a list of strings, likely used for chunking the input data.",
        "items": [
          {
            "id": "026a21ea-5807-858f-2b43-e6bd784ef8dc",
            "ancestors": [],
            "description": "Defines a set of properties: `meta`, `lookup`, and `chunks`. The `meta` property is an object with additional information about the summary, while the `lookup` property is an array of arrays representing the lookup tables for each chunk. The `chunks` property can optionally be defined as an array of strings, representing the chunks of data in the summary.",
            "name": "Summary",
            "location": {
              "start": 3,
              "insert": 3,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 5,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "jest.config.js",
    "path": "jest.config.js",
    "content": {
      "structured": {
        "description": "configuration options for Jest, a popular JavaScript testing framework. The `preset` option sets the Jest preset to use, in this case \"ts-jest\". The `testEnvironment` option specifies that Jest should run tests in a Node environment. Finally, the `testMatch` option specifies which files should be searched for test files, using glob syntax to match files with extensions \".test.ts\".",
        "items": []
      }
    }
  }
]